extend partials/layout

block content
	h2 Pomodoro start
	.controls
		.workTimer
			p Work Length
			button.plus(type="button", ) +
			p.time 5
			button.minus(type="button", ) -
		.breakTimer
			p Break Length
			button.plus(type="button", ) +
			p.time 5
			button.minus(type="button", ) -

	.tomatoTimer
		.svgSpace
			svg(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', viewBox='0 0 100 100', preserveAspectratio='none')
				include partials/tomato
				+tomato('clipPath')
					clipPath#clipPath
						path(id="arcMask", d="M50,0  a50,50 0 1,0 0.03141592446881286,0.000009869604078005523 z", style="stroke: #cccc00; stroke-width:2; fill:lightblue; stroke-linejoin: round;")
				text(x='50%', y='50%', dy="15%") 25
				circle#secondsLeft(cx='50%', cy='50%', r="49%", transform='rotate(-90 50 50)')

		p.session Session
		p.seconds :25

	.progress
		progress(value="50", max="100") 50%
		hr
		input#maskRange(type="range", name="name", value="100")
		output#sliderOut
		hr
		input#num(type='number', value='25', min='0', max='50')
		hr
		input#secondsSlider(type='range', value='100')
		output#sliderOut2 0




block scripts
	script.
		
		class ArcMask {
			constructor(element, startX, startY, radius) {
				this._element = element;
				this._startX = startX;
				this._startY = startY;
				this._radius = radius;
				
				this._dl = `M${startX},${startY} a${radius},${radius} 0`;
			}
			
			_getNewCoord(percent) {
				let theta = 2 * Math.PI * percent / 100, r = this._radius;
				return {x: r * Math.sin(theta), y: r * (1 - Math.cos(theta))};
			}
			
			drawArc(percent) {
				percent = 100 - percent;
				let dm;
				let dr = (percent === 100 || percent === 0) ? '' : "L50,50 z";
				if(percent <= 50) {
					dm = '1,0';
					if(percent === 0) percent = .01;
				} else {
					dm = '0,0 ';      
				}

				let coord = this._getNewCoord(percent);


				this._element.setAttribute('d', `${this._dl} ${dm} ${coord.x},${coord.y} ${dr}`);
			}
			
		}
		
		const sliderOut = document.getElementById('sliderOut');
		
		const arcMask = new ArcMask(document.getElementById('arcMask'), 50, 0, 50);
		
		document.getElementById('maskRange').oninput = function() {
			sliderOut.value = this.value;
			arcMask.drawArc(this.value);
		}
		
		//######################################
		$(document).ready(function() {
				let $svgNum = $('svg > text');
				console.log(parseInt($svgNum.css('stroke-dasharray'), 10));
				const dOffset = parseInt($svgNum.css('stroke-dasharray'), 10);
				$('#num').on('change', function (event) {
					console.log(this.value);
					// $svgNum.text(this.value);
					$svgNum.animate({
						"stroke-dashoffset": dOffset},	//480
						2000, () => $svgNum.text(this.value).animate({"stroke-dashoffset": 0}, 1000));
				});
				
				
				//########################################
				//- const r = 30;
				
				
				const sliderOut2 = document.getElementById('sliderOut2');
				const circSecondsLeft = document.getElementById('secondsLeft');
				
				const r = parseInt(window.getComputedStyle(circSecondsLeft).r, 10);
				const fct = Math.round(r * 6.285714286)/100;
				
				console.log("r:", r);
				console.log("r attr:", circSecondsLeft.getAttribute("r"));

				function sliderChanged(event) {
					let val = 100 - this.value;
					sliderOut2.value = this.value;
				  circSecondsLeft.style["stroke-dashoffset"] = -fct* val;
				}

				document.getElementById('secondsSlider').oninput = sliderChanged;
		});
		
		
