extend partials/layout

block content
	include partials/defaults
	.wrapper.transparent
		.globalSettings
			.panel.notificationControls
				h3 Notify me when it's time
				ul
					li: label
						input#notify-break(type="checkbox")
						span for a break
					li: label
						input#notify-work(type="checkbox")
						span for work
					
			.panel.pauseControls
				h3 Pause after
				ul
					li: label
						input#pause-on-break-start(type="checkbox")
						span a work session
					li: label
						input#pause-on-work-start(type="checkbox")
						span a break session
						
			
		h1.headTitle Pomodoro timer
		.timingControls
			.workTimer
				p.title Work Length
				button.plus(type="button") +
				p.time= defaults.workTime
				button.minus(type="button") -

			.midPanel
				- for(let [key,val] of defaults.checkboxes)
					label.icon(class=key, title=val.tooltip)
						input(type="checkbox", id=key.replace('icon', 'check'), checked=val.on)
						span

			button#skipSession.midButton(type="button", title="Skip session") »
				
					
			.breakTimer
				p.title Break Length
				button.plus(type="button") +
				p.time= defaults.breakTime
				button.minus(type="button") -
		
		- let clickhoverMaskId = "pointerEventClip"
		//- for some reason Firefox ignores clip-path inside CSS
		.tomatoTimer(style="clip-path: url(##{clickhoverMaskId}); -webkit-clip-path: circle(50% at 50% 50%);")
			.svgSpace
				svg(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', viewBox='0 0 100 100', preserveAspectratio='none')
					defs
						- let tomatoMaskId = "tomatoMask"
						mask(id=tomatoMaskId)
							circle(cx='50%', cy='50%', r='51%', fill="#844f4f")
							path(id="arcMask", d="M50,0	a50,50 0 1,0 0.03141592446881286,0.000009869604078005523 z", fill="white" stroke="black")
						clipPath(id=clickhoverMaskId, clipPathUnits="objectBoundingBox")
							circle(cx='0.5', cy='0.5', r='0.51')
					- const displayTomatoIcon = defaults.checkboxes.get("icon-clock-filled")
					- const tomatoClass = displayTomatoIcon.on ? "all-tomato" : "all-tomato transparent"
					include partials/tomato
					+tomato(tomatoClass, tomatoMaskId)
					text#minutesSvg(x='50%', y='50%', dy="15%")= defaults.workTime
					- const displaySecondsIcon = defaults.checkboxes.get("icon-clock-seconds")
					circle#secondsLeft(cx='50%', cy='50%', r="51%", transform='rotate(-90 50 50)', class=(displaySecondsIcon.on ? "" : "invisible"))

			.session
				p#sessionName Work
				p session
				p#pausedState.hidden ❚❚
			p.seconds#secondsLeftText

		.progress
			- const displayProgressbarIcon = defaults.checkboxes.get("icon-progress")
			progress#totalProgressBar.red.meter-animated(value="0", max="100", class=(displayProgressbarIcon.on ? "" : "progress-off"))
			
		.panel.pomodoroDefaults
			h2 Pomodoro defaults
			ul
				li
					span Work session: 
					button#work-25(type="button"): span 25
					|	min.
				hr
				li
					span Short break: 
					button#short-break-5(type="button"): span 5
					|	min.
				li
					span Long Break: 
					button#long-break-15(type="button"): span 15
					| , 
					button#long-break-30(type="button"): span 30
					|	min.
					
		.panel.audioControls.default-sound#speakerPanel
			.upper-subpanel
				.speaker-container
					svg#speakerSvg.speaker(viewbox='0 0 100 100', width='100px', height='100px')
						defs
							radialgradient#radial1(fx='25%', fy='25%', r='65%', spreadmethod='pad')
								stop(offset='0%', stop-color='gray', stop-opacity='1')
								stop(offset='100%', stop-color='white', stop-opacity='1')
							pattern#speakerPattern(x='10', y='10', width='10', height='10', patternunits='userSpaceOnUse', patterntransform='rotate(45) scale(0.6)')
								rect(x='0', y='0', height='10', width='10', style='stroke: black; fill: url(#radial1);', rx='2.5')
							filter#trembleFilter(style='color-interpolation-filters:sRGB;')
								feturbulence#feTurbulence6680(type='fractalNoise', numoctaves='0', seed='0', basefrequency='0.052999999999999999', result='turbulence')
								fedisplacementmap#feDisplacementMap6682(in='SourceGraphic', in2='turbulence', scale='3', ychannelselector='G', xchannelselector='R')
						circle#speakerInner(style='fill:black;', cy='50', cx='50', r='20')
						circle(cx='50', cy='50', r='50', style='stroke:none;fill:url(#speakerPattern);filter:url(#trembleFilter);')
				.slider
					span max
					input#volume(type='range', min='0', max='1', value='0.5', step='0.05', orient='vertical')
					span min
				span.vert volume
				
			.lower-subpanel
				button#reset-upload-btn(type='button', value='upload') Custom sound
				input#file-upload(type='file', accept='audio/*')
			svg.corner(viewbox='0 0 100 100', preserveaspectratio='xMaxYMax')
				defs
					path#cornerPath(d='M17,98 l61,0 a20,20 0 0,0 20,-20 l0,-50', style='stroke:#660000; stroke-width:2; fill:none;')
				text(x='0', color='')
					textpath(xlink:href='#cornerPath') drop a custom sound file
