{"version":3,"sources":["bundle.js","alarm.js","controls-globalSettings.js","controls-timerButtons.js","controls-timerTimes.js","localStorage.js","timerDisplay.js","pubsub.js","midPanel.js","progressIndicators.js","timer.js","tomatoSvg.js","tomatoTimerBigButton.js"],"names":["_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","setCustomSoundValues","resetUploadBtn","textContent","panel","classList","remove","revertToDefault","audio","src","defaultSound","speakerContainer","add","eventDispatcher","emit","playSound","restart","arguments","length","undefined","error","paused","play","pause","currentTime","handleFile","file","reader","FileReader","onload","e","target","result","readAsDataURL","speakerTremble","turbulence","seed","baseVal","speakerInner","r","radCoeff","on","requestAnimationFrame","startSpeakerTremble","numOctaves","stopSpeakerTremble","toggleDropzone","toggle","contains","document","elementFromPoint","clientX","clientY","askForPermission","notifyOnBreak","checked","notifyOnWork","testForNotification","disableNotifyChecks","disabled","Notification","permission","requestPermission","then","onclick","fireNotification","sessionName","itsBreakTime","notification","buildNotification","onclose","window","focus","close","title","body","icon","workIncrement","multiplier","workDecrement","breakIncrement","breakDecrement","repeatFunction","repeatF","start","intervalId","setInterval","freq","stop","clearInterval","connectButtonOnOff","btn","_ref3","addEventListener","connectKeydown","fn","keyCode","disableBtn","disable","btnName","work25","workMinus","workPlus","workIncrementRepeat","workDecrementRepeat","longBreak30","longBreak15","shortBreak5","breakMinus","breakPlus","breakIncrementRepeat","breakDecrementRepeat","getWorkTimeSetting","parseInt","workTime","getBreakTimeSetting","breakTime","getValidTime","val","emitControlTimerChange","timer","parseStoredItem","keyName","JSON","parse","localStorage","restoreSettings","pauseOnBreakStart","pauseOnWorkStart","checkVolume","checkClockSeconds","checkClockFilled","checkProgress","alarmSound","saveInitSettings","cancelTransition","minutesSvg","changeMinuteSvg","h","m","changeNow","newSessionStarted","hAndMin","minutesSvgValue","setImmediateMinuteSvg","changeCircleDashOffset","secondsLeft","dashoffset","secondsLeftCircle","style","fct","setSecondsDisplay","seconds","secondsLeftText","secondsToHMinSec","Math","floor","s","_createClass","defineProperties","props","i","descriptor","defineProperty","key","protoProps","staticProps","EventDispatcher","this","events","eventName","push","foundIndex","indexOf","splice","_len","data","Array","_key","forEach","apply","EventfulClass","_dispatcher","dispatcher","_dispatcher2","off","_dispatcher3","get","_ref","reason","volumeSlider","getElementById","oninput","volume","fileUpload","Audio","click","files","speakerSvg","parentElement","stopPropagation","preventDefault","dataTransfer","type","notificationPanel","querySelector","parentNode","removeChild","_ref2","name","started","session","_ref4","currentState","_ref5","endedSessionName","ended","startedSessionName","oldVal","newVal","minutes","sound","getItem","onchange","skipSessionBtn","ArcMask","element","startX","startY","radius","_element","_startX","_startY","_radius","_dl","percent","theta","PI","x","sin","y","cos","dm","dr","coord","_getNewCoord","setAttribute","prgBar","arcMask","_ref6","_ref6$session","left","secondsTotal","len","percentLeft","round","drawArc","_ref7","_ref7$modification","modification","valueName","isCurrentSession","newValue","Timer","_EventfulClass","options","_this","getPrototypeOf","defaultOptions","updateFrequency","loop","pauseOnSessionStart","pauseOnSessionEnd","reversed","_Object$assign","assign","_updateFrequency","_loop","_pauseOnSessionStart","_pauseOnSessionEnd","_reversed","_state","_len2","sessions","_key2","_sessions","startIndex","_currentSession","_currentSessionIndex","_sessionsByName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","checkTimeValidity","err","index","isActive","isPaused","_resetCurrentSessionIfElapsed","_onSessionModified","filter","getSession","resetCurrentSession","settingSession","oldValue","_sessionTransition","skip","pauseOnStart","pauseOnEnd","_pause","reset","resume","prevState","resetOrder","_onStateChanged","_resume","_onSessionProgress","_decrement","bind","_pauseOnEndIfRequired","_goToNextSession","_pauseOnStartIfRequired","prevSession","_getNextSession2","_getNextSession","_onSessionChanged","nextSessionIndex","nextSession","thenPause","resetCurrent","_skipSession","previousState","timerState","state","set","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_onOptionsModified","RangeError","pomodoroTimer","setLength","setSessionToPauseOnStart","skipToNextSession","getAttribute","_ref8","_ref8$modification","_secondsToHMinSec","_ref9","_ref9$session","_secondsToHMinSec2","sessionText","_ref10","_ref10$started$sessio","pausedStateText","_ref11","visibilityState","_secondsToHMinSec3","currentSession","tomatoSvg","skipTransition","clientWidth","tomatoTimerBigButton"],"mappings":"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","file":"bundle.js","sourcesContent":[";(function() {\n\"use strict\";\n\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//events - a super-basic Javascript (publish subscribe) pattern\n\nvar EventDispatcher = function () {\n\tfunction EventDispatcher() {\n\t\t_classCallCheck(this, EventDispatcher);\n\n\t\tthis.events = {};\n\t}\n\n\t// subscribe fn to event\n\n\n\t_createClass(EventDispatcher, [{\n\t\tkey: \"on\",\n\t\tvalue: function on(eventName, fn) {\n\t\t\tthis.events[eventName] ? this.events[eventName].push(fn) : this.events[eventName] = [fn];\n\t\t}\n\n\t\t// unsubscribe fn from event\n\n\t}, {\n\t\tkey: \"off\",\n\t\tvalue: function off(eventName, fn) {\n\t\t\tif (fn == undefined) {\n\t\t\t\t// unsubscribe all\n\t\t\t\tthis.events[eventName] = undefined;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar events = this.events[eventName];\n\t\t\tif (events) {\n\t\t\t\tvar foundIndex = events.indexOf(fn);\n\t\t\t\tif (foundIndex !== -1) {\n\t\t\t\t\tevents.splice(foundIndex, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// fire off an event\n\n\t}, {\n\t\tkey: \"emit\",\n\t\tvalue: function emit(eventName) {\n\t\t\tfor (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t\t\t\tdata[_key - 1] = arguments[_key];\n\t\t\t}\n\n\t\t\tif (this.events[eventName]) {\n\t\t\t\tthis.events[eventName].forEach(function (fn) {\n\t\t\t\t\tfn.apply(undefined, data);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn EventDispatcher;\n}();\n\nvar EventfulClass = function () {\n\tfunction EventfulClass() {\n\t\tvar eventDispatcher = arguments.length <= 0 || arguments[0] === undefined ? new EventDispatcher() : arguments[0];\n\n\t\t_classCallCheck(this, EventfulClass);\n\n\t\tif (!(eventDispatcher instanceof EventDispatcher)) throw new TypeError(\"eventDispatcher must be an instance of EventDispatcher\");\n\t\tthis._dispatcher = eventDispatcher;\n\t}\n\n\t_createClass(EventfulClass, [{\n\t\tkey: \"on\",\n\t\tvalue: function on() {\n\t\t\tvar _dispatcher;\n\n\t\t\t(_dispatcher = this.dispatcher).on.apply(_dispatcher, arguments);\n\t\t}\n\t}, {\n\t\tkey: \"off\",\n\t\tvalue: function off() {\n\t\t\tvar _dispatcher2;\n\n\t\t\t(_dispatcher2 = this.dispatcher).off.apply(_dispatcher2, arguments);\n\t\t}\n\t}, {\n\t\tkey: \"emit\",\n\t\tvalue: function emit() {\n\t\t\tvar _dispatcher3;\n\n\t\t\t(_dispatcher3 = this.dispatcher).emit.apply(_dispatcher3, arguments);\n\t\t}\n\t}, {\n\t\tkey: \"dispatcher\",\n\t\tget: function get() {\n\t\t\treturn this._dispatcher;\n\t\t}\n\t}]);\n\n\treturn EventfulClass;\n}();\n\nvar eventDispatcher = new EventDispatcher();\n\n// sound alarm on timer:session-changed\n\neventDispatcher.on('timer:session-changed', function (_ref) {\n\tvar reason = _ref.reason;\n\n\t// don't fire on skipSession\n\tif (reason === \"previous-session-ended\" && checkVolume.checked) playSound(true);\n});\n\n// input[type=\"range\"]#volume\nvar volumeSlider = document.getElementById(\"volume\");\n\nvolumeSlider.oninput = function () {\n\taudio.volume = this.value;\n};\n\nvar fileUpload = document.getElementById(\"file-upload\");\nvar resetUploadBtn = document.getElementById(\"reset-upload-btn\");\n\nfunction setCustomSoundValues() {\n\tresetUploadBtn.textContent = \"Default sound\";\n\tresetUploadBtn.value = \"reset\";\n\tpanel.classList.remove(\"default-sound\");\n}\n\nvar defaultSound = \"/audio/alarm.mp3\";\nvar audio = new Audio(defaultSound);\nresetUploadBtn.addEventListener(\"click\", function () {\n\tif (this.value === \"upload\") {\n\t\t// empty fileUpload.files\n\t\tfileUpload.value = \"\";\n\t\tfileUpload.click();\n\t} else {\n\t\trevertToDefault();\n\t}\n});\n\nfunction revertToDefault() {\n\taudio.src = defaultSound;\n\tspeakerContainer.classList.remove(\"playing\");\n\tconsole.log(\"audio state immediate\", audio.paused, audio.currentTime);\n\tconsole.log(\"reverting to default\");\n\tresetUploadBtn.textContent = \"Custom sound\";\n\tresetUploadBtn.value = \"upload\";\n\tpanel.classList.add(\"default-sound\");\n\n\teventDispatcher.emit(\"alarm-sound:reset\");\n}\n\nfileUpload.addEventListener(\"change\", function () {\n\tconsole.log(\"upload change\", this.files);\n\tif (this.files.length === 0) return;\n\thandleFile(this.files[0]);\n\tsetCustomSoundValues();\n});\n\nvar speakerSvg = document.getElementById(\"speakerSvg\");\nvar speakerContainer = speakerSvg.parentElement;\nspeakerSvg.addEventListener(\"click\", function () {\n\treturn playSound();\n});\n\nfunction playSound() {\n\tvar restart = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n\tif (audio.error || !audio.src) return;\n\tconsole.log(\"AUDIO PAUSED\", audio.paused);\n\n\tif (audio.paused) {\n\t\taudio.play();\n\t} else {\n\t\t// play from start if currently playing after being triggered by user\n\t\tif (!restart) audio.pause();\n\t\taudio.currentTime = 0;\n\t}\n}\n\nfunction handleFile(file) {\n\tconsole.log(file);\n\tvar reader = new FileReader();\n\treader.onload = function (e) {\n\t\tconsole.log(\"alarm-sound setting\");\n\t\teventDispatcher.emit(\"alarm-sound:set\", audio.src = e.target.result);\n\t\tspeakerContainer.classList.remove(\"playing\");\n\t};\n\treader.readAsDataURL(file);\n}\n\naudio.addEventListener(\"play\", function () {\n\tconsole.log(\"play\");\n\tspeakerContainer.classList.add(\"playing\");\n\tstartSpeakerTremble();\n});\naudio.addEventListener(\"pause\", function () {\n\tconsole.log(\"pause\");\n\tspeakerContainer.classList.remove(\"playing\");\n\tstopSpeakerTremble();\n});\n\naudio.addEventListener(\"canplay\", function () {\n\tconsole.log(\"canplay\");\n\tspeakerContainer.classList.remove(\"error\");\n\tif (audio.paused) stopSpeakerTremble();\n});\naudio.addEventListener(\"error\", function (e) {\n\tconsole.log(\"error\", e, audio.error, \"code\", audio.error.code);\n\tspeakerContainer.classList.add(\"error\");\n\tstopSpeakerTremble();\n});\n\n// animate .speaker\nvar turbulence = document.getElementById(\"feTurbulence6680\");\nvar speakerInner = document.getElementById(\"speakerInner\");\nfunction speakerTremble() {\n\tturbulence.seed.baseVal = (turbulence.seed.baseVal + 1) % 100;\n\tspeakerInner.r.baseVal.value += speakerTremble.radCoeff * 0.5;\n\tif (speakerInner.r.baseVal.value > 25) speakerTremble.radCoeff = -1;else if (speakerInner.r.baseVal.value < 20) speakerTremble.radCoeff = 1;\n\n\tif (speakerTremble.on) requestAnimationFrame(speakerTremble);\n}\nspeakerTremble.on = false;\nspeakerTremble.radCoeff = 1;\nfunction startSpeakerTremble() {\n\tspeakerTremble.on = true;\n\tturbulence.numOctaves.baseVal = 5;\n\trequestAnimationFrame(speakerTremble);\n}\nfunction stopSpeakerTremble() {\n\tspeakerTremble.on = false;\n\tturbulence.numOctaves.baseVal = 0;\n}\n\n// drag & drop in .panel.audioControls\nvar panel = document.getElementById(\"speakerPanel\");\n/* events fired on the drop targets */\npanel.addEventListener(\"dragover\", function (e) {\n\t// prevent default to allow drop\n\t//console.log(\"dragover\", e.target);\n\te.stopPropagation();\n\te.preventDefault();\n});\n\npanel.addEventListener(\"dragenter\", function (e) {\n\t// indicate .panel as a .dropzone\n\te.stopPropagation();\n\te.preventDefault();\n\t//console.log(\"dragenter\", e.target);\n\tpanel.classList.add(\"dropzone\");\n});\n\npanel.addEventListener(\"dragend\", function (e) {\n\te.stopPropagation();\n\te.preventDefault();\n\t//console.log(\"dragend\", e.target);\n\tpanel.classList.remove(\"dropzone\");\n});\n\npanel.addEventListener(\"dragleave\", function (e) {\n\te.stopPropagation();\n\te.preventDefault();\n\ttoggleDropzone(e);\n});\n\npanel.addEventListener(\"drop\", function (e) {\n\t// prevent default action (open as link for some elements)\n\te.stopPropagation();\n\te.preventDefault();\n\tconsole.log(\"drop\", e.target);\n\tpanel.classList.remove(\"dropzone\");\n\n\tvar file = e.dataTransfer.files[0];\n\tif (file.type.indexOf(\"audio/\") === 0) {\n\t\thandleFile(file);\n\t\tsetCustomSoundValues();\n\t}\n});\n\nfunction toggleDropzone(e) {\n\treturn panel.classList.toggle(\"dropzone\", panel.contains(document.elementFromPoint(e.clientX, e.clientY)));\n}\n\n// .globalSettings > .pauseControls\n\nvar pauseOnBreakStart = document.getElementById(\"pause-on-break-start\");\nvar pauseOnWorkStart = document.getElementById(\"pause-on-work-start\");\n\npauseOnBreakStart.addEventListener('change', function () {\n\tconsole.log(this, \"changed to\", this.checked ? \"checked\" : \"unchecked\");\n\teventDispatcher.emit('check-pause-on-break-start:changed', this.checked);\n});\npauseOnWorkStart.addEventListener('change', function () {\n\tconsole.log(this, \"changed to\", this.checked ? \"checked\" : \"unchecked\");\n\teventDispatcher.emit('check-pause-on-work-start:changed', this.checked);\n});\n\n// .globalSettings > .notificationControls\n\nvar notifyOnBreak = document.getElementById(\"notify-break\");\nvar notifyOnWork = document.getElementById(\"notify-work\");\n\nnotifyOnBreak.addEventListener('change', function () {\n\tconsole.log(this, \"changed to\", this.checked ? \"checked\" : \"unchecked\");\n\teventDispatcher.emit('notify-break:changed', this.checked);\n});\nnotifyOnWork.addEventListener('change', function () {\n\tconsole.log(this, \"changed to\", this.checked ? \"checked\" : \"unchecked\");\n\teventDispatcher.emit('notify-work:changed', this.checked);\n});\n\nnotifyOnBreak.onclick = notifyOnWork.onclick = askForPermission;\n\n(function () {\n\t// if notifications aren't supported, remove the panel\n\tif (!(\"Notification\" in window)) {\n\t\t// don't keep references\n\t\tnotifyOnBreak = notifyOnWork = null;\n\t\tvar notificationPanel = document.querySelector('.notificationControls');\n\t\tnotificationPanel.parentNode.removeChild(notificationPanel);\n\t} else if (Notification.permission === 'denied') {\n\t\tdisableNotifyChecks();\n\t}\n})();\n\nfunction askForPermission() {\n\t// if any notification checkbox is checked\n\tif (notifyOnBreak.checked || notifyOnWork.checked) testForNotification();\n}\n\nfunction disableNotifyChecks() {\n\tnotifyOnBreak.disabled = notifyOnWork.disabled = true;\n\tnotifyOnBreak.checked = notifyOnWork.checked = false;\n}\n\nfunction testForNotification() {\n\t// if already granted\n\tif (Notification.permission === \"granted\") return;\n\n\t// if permission wasn't denied previously\n\tif (Notification.permission !== 'denied') {\n\t\t// returns a Promise resolved with granted or denied, doesn't do anything on default (when dismissed)\n\t\tNotification.requestPermission().then(function (result) {\n\t\t\tif (result === \"denied\") {\n\t\t\t\t// ask only once\n\t\t\t\tnotifyOnBreak.onclick = notifyOnWork.onclick = null;\n\t\t\t\t// if no permission, uncheck and disable\n\t\t\t\tdisableNotifyChecks();\n\t\t\t} else if (result === \"granted\") {\n\t\t\t\t// ask only once\n\t\t\t\tnotifyOnBreak.onclick = notifyOnWork.onclick = null;\n\t\t\t}\n\t\t\t// don't do anything === ask again later if(result === \"default\")\n\t\t\tconsole.log(\"NOTIFY REQUEST\", result);\n\t\t});\n\t}\n}\n\n// keep reference to last notification\nvar notification = void 0;\n\n// dismiss notfication if clicked anywhere on the page\ndocument.addEventListener(\"click\", function () {\n\tif (notification) notification.close();\n});\n\nfunction fireNotification(sessionName) {\n\t// if .notificationControls has been removed\n\tif (notifyOnBreak === null) return;\n\t// only if permission is granted explicitly\n\tif (Notification.permission !== \"granted\") return;\n\n\tvar itsBreakTime = sessionName === \"break\";\n\tif (itsBreakTime && notifyOnBreak.checked || !itsBreakTime && notifyOnWork.checked) {\n\t\tnotification = buildNotification(itsBreakTime);\n\t\tnotification.onclose = function () {\n\t\t\tconsole.log(\"notification closed\");\n\t\t\t// don't keep the reference\n\t\t\tnotification = null;\n\t\t};\n\t\tnotification.onclick = function () {\n\t\t\tconsole.log(\"notification clicked\");\n\t\t\twindow.focus();\n\t\t\tnotification.close();\n\t\t};\n\t\tconsole.log(notification);\n\t}\n}\n\nvar icon = \"/images/clock_red.png\";\n\nfunction buildNotification(itsBreakTime) {\n\tvar title = itsBreakTime ? \"Time for a Break\" : \"Time for Work\";\n\tvar body = itsBreakTime ? \"Good work! Time for a break.\" : \"Ready for more? Time for work.\";\n\n\tconsole.log(\"FIRING NOTIFICATION\");\n\n\treturn new Notification(title, { body: body, icon: icon });\n}\n\neventDispatcher.on('timer:session-changed', function (_ref2) {\n\tvar name = _ref2.started.session.name;\n\tvar reason = _ref2.reason;\n\n\tconsole.log(\"session started\", name, \"for reason\", reason);\n\t// don't Notification fire on skipSession\n\tif (reason === \"previous-session-ended\") fireNotification(name);\n});\n\n// .pomodoroDefaults button\n\nvar work25 = document.getElementById('work-25');\nvar shortBreak5 = document.getElementById('short-break-5');\nvar longBreak15 = document.getElementById('long-break-15');\nvar longBreak30 = document.getElementById('long-break-30');\n\nwork25.addEventListener('click', function () {\n\teventDispatcher.emit(\"work-timer:set\", 25);\n});\nshortBreak5.addEventListener('click', function () {\n\teventDispatcher.emit(\"break-timer:set\", 5);\n});\nlongBreak15.addEventListener('click', function () {\n\teventDispatcher.emit(\"break-timer:set\", 15);\n});\nlongBreak30.addEventListener('click', function () {\n\teventDispatcher.emit(\"break-timer:set\", 30);\n});\n\n// button.plus and .minus in .timingControls > .workTimer and. breakTimer\n\nvar workPlus = document.querySelector('.workTimer > .plus');\nvar workMinus = document.querySelector('.workTimer > .minus');\n\nvar breakPlus = document.querySelector('.breakTimer > .plus');\nvar breakMinus = document.querySelector('.breakTimer > .minus');\n\nvar multiplier = 1;\n\ndocument.addEventListener(\"keydown\", function (e) {\n\t// keyCode 16 = SHIFT\n\tif (e.keyCode === 16) {\n\t\tconsole.log(\"SHIFT PRESSED\");\n\t\tmultiplier = 5;\n\t}\n});\ndocument.addEventListener(\"keyup\", function (e) {\n\tif (e.keyCode === 16) {\n\t\tconsole.log(\"SHIFT RELEASED\");\n\t\tmultiplier = 1;\n\t}\n});\n\nfunction workIncrement() {\n\teventDispatcher.emit('work-timer:++', multiplier);\n}\nfunction workDecrement() {\n\teventDispatcher.emit('work-timer:--', multiplier);\n}\n\nfunction breakIncrement() {\n\tconsole.log(\"breakincr\");\n\teventDispatcher.emit('break-timer:++', multiplier);\n}\nfunction breakDecrement() {\n\teventDispatcher.emit('break-timer:--', multiplier);\n}\n\nfunction repeatFunction(repeatF) {\n\tvar freq = arguments.length <= 1 || arguments[1] === undefined ? 200 : arguments[1];\n\n\tvar intervalId = void 0;\n\tfunction start() {\n\t\trepeatF();\n\t\tintervalId = setInterval(repeatF, freq);\n\t}\n\tfunction stop() {\n\t\tclearInterval(intervalId);\n\t}\n\n\treturn { start: start, stop: stop };\n}\n\nfunction connectButtonOnOff(btn, _ref3) {\n\tvar start = _ref3.start;\n\tvar stop = _ref3.stop;\n\n\tbtn.addEventListener('mousedown', start);\n\tbtn.addEventListener('mouseup', stop);\n\tbtn.addEventListener('mouseleave', stop);\n}\n\nvar workIncrementRepeat = repeatFunction(workIncrement);\nvar workDecrementRepeat = repeatFunction(workDecrement);\n\nvar breakIncrementRepeat = repeatFunction(breakIncrement);\nvar breakDecrementRepeat = repeatFunction(breakDecrement);\n\nconnectButtonOnOff(workPlus, workIncrementRepeat);\nconnectButtonOnOff(workMinus, workDecrementRepeat);\n\nconnectButtonOnOff(breakPlus, breakIncrementRepeat);\nconnectButtonOnOff(breakMinus, breakDecrementRepeat);\n\nfunction connectKeydown(btn, fn) {\n\tbtn.addEventListener('keydown', function (e) {\n\t\t// keyCode 32 = space, 13 = Enter, 16 = Shift\n\t\tif (e.keyCode === 32 || e.keyCode === 13) {\n\t\t\tfn();\n\t\t}\n\t});\n}\n\nconnectKeydown(workPlus, workIncrement);\nconnectKeydown(workMinus, workDecrement);\n\nconnectKeydown(breakPlus, breakIncrement);\nconnectKeydown(breakMinus, breakDecrement);\n\nfunction disableBtn(disable, btnName) {\n\tif (btnName === \"work\") {\n\t\twork25.disabled = workMinus.disabled = workPlus.disabled = disable;\n\n\t\t// stop incr/decrementing if in progress\n\t\tworkIncrementRepeat.stop();\n\t\tworkDecrementRepeat.stop();\n\t} else if (btnName === \"break\") {\n\t\tlongBreak30.disabled = longBreak15.disabled = shortBreak5.disabled = breakMinus.disabled = breakPlus.disabled = disable;\n\n\t\t// stop incr/decrementing if in progress\n\t\tbreakIncrementRepeat.stop();\n\t\tbreakDecrementRepeat.stop();\n\t}\n}\n\neventDispatcher.on('timer:state-changed', function (_ref4) {\n\tvar currentState = _ref4.currentState;\n\tvar sessionName = _ref4.session.name;\n\n\tdisableBtn(currentState === \"active\", sessionName);\n});\neventDispatcher.on('timer:session-changed', function (_ref5) {\n\tvar endedSessionName = _ref5.ended.session.name;\n\tvar startedSessionName = _ref5.started.session.name;\n\n\tdisableBtn(false, endedSessionName);\n\tdisableBtn(true, startedSessionName);\n});\n\n// .time in .timingControls > .workTimer and .breakTimer\n\nvar workTime = document.querySelector('.workTimer > .time');\nvar breakTime = document.querySelector('.breakTimer > .time');\n\nfunction getWorkTimeSetting() {\n\treturn parseInt(workTime.textContent, 10);\n}\n\nfunction getBreakTimeSetting() {\n\treturn parseInt(breakTime.textContent, 10);\n}\n\nfunction getValidTime(val) {\n\treturn val < 1 ? 1 : val;\n}\n\nfunction emitControlTimerChange(timer, val) {\n\t// \"work-timer:time-set\" or \"break-timer:time-set\"\n\teventDispatcher.emit(timer + \"-timer:time-set\", val * 60);\n}\n\neventDispatcher.on('work-timer:++', function () {\n\tvar multiplier = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];\n\n\tvar oldVal = parseInt(workTime.textContent, 10);\n\tvar newVal = oldVal + 1 * multiplier;\n\tnewVal = getValidTime(newVal);\n\tif (oldVal === newVal) return;\n\tworkTime.textContent = newVal;\n\n\temitControlTimerChange(\"work\", newVal);\n});\neventDispatcher.on('work-timer:--', function () {\n\tvar multiplier = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];\n\n\tvar oldVal = parseInt(workTime.textContent, 10);\n\tvar newVal = oldVal - 1 * multiplier;\n\tnewVal = getValidTime(newVal);\n\tif (oldVal === newVal) return;\n\tworkTime.textContent = newVal;\n\n\temitControlTimerChange(\"work\", newVal);\n});\neventDispatcher.on('work-timer:set', function (minutes) {\n\tif (parseInt(workTime.textContent, 10) === minutes) return;\n\tworkTime.textContent = minutes;\n\n\temitControlTimerChange(\"work\", minutes);\n});\n\neventDispatcher.on('break-timer:++', function () {\n\tvar multiplier = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];\n\n\tvar oldVal = parseInt(breakTime.textContent, 10);\n\tvar newVal = oldVal + 1 * multiplier;\n\tnewVal = getValidTime(newVal);\n\tif (oldVal === newVal) return;\n\tbreakTime.textContent = newVal;\n\n\temitControlTimerChange(\"break\", newVal);\n});\neventDispatcher.on('break-timer:--', function () {\n\tvar multiplier = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];\n\n\tvar oldVal = parseInt(breakTime.textContent, 10);\n\tvar newVal = oldVal - 1 * multiplier;\n\tnewVal = getValidTime(newVal);\n\tif (oldVal === newVal) return;\n\tbreakTime.textContent = newVal;\n\n\temitControlTimerChange(\"break\", newVal);\n});\neventDispatcher.on('break-timer:set', function (minutes) {\n\tif (parseInt(breakTime.textContent, 10) === minutes) return;\n\tbreakTime.textContent = minutes;\n\n\temitControlTimerChange(\"break\", minutes);\n});\n\n// store user settings between sessions\n\nfunction parseStoredItem(keyName) {\n\treturn JSON.parse(localStorage[keyName]);\n}\n\nfunction restoreSettings() {\n\t// .pauseControls\n\tpauseOnBreakStart.checked = parseStoredItem(\"check-pause-on-break-start\");\n\tpauseOnWorkStart.checked = parseStoredItem(\"check-pause-on-work-start\");\n\n\t// .notificationControls\n\tif (notifyOnBreak && \"Notification\" in window && Notification.permission === \"granted\") {\n\t\t// check that .notificationControls weren't removed\n\t\tnotifyOnBreak.checked = parseStoredItem(\"notify-break\");\n\t\tnotifyOnWork.checked = parseStoredItem(\"notify-work\");\n\t}\n\n\t// .timingComtrols\n\t// .workTimer\n\tworkTime.textContent = parseStoredItem(\"work-timer\");\n\n\t// .breakTimer\n\tbreakTime.textContent = parseStoredItem(\"break-timer\");\n\n\t// .midPanel\n\tcheckVolume.checked = parseStoredItem(\"check-volume\");\n\tcheckClockSeconds.checked = parseStoredItem(\"check-clock-seconds\");\n\tcheckClockFilled.checked = parseStoredItem(\"check-clock-filled\");\n\tcheckProgress.checked = parseStoredItem(\"check-progress\");\n\n\t// alarm sound; a string, so don't parse\n\tvar alarmSound = localStorage[\"alarm-sound\"];\n\t// if alarm-sound exists assign it and set custom values where necessary, otherwise set defaultSound and don't touch the values\n\tif (alarmSound) {\n\t\taudio.src = alarmSound;\n\t\tsetCustomSoundValues();\n\t}\n}\n\n// update localStorage on settings changes\n// .pauseControls\neventDispatcher.on('check-pause-on-break-start:changed', function (val) {\n\tlocalStorage[\"check-pause-on-break-start\"] = val;\n});\neventDispatcher.on('check-pause-on-work-start:changed', function (val) {\n\tlocalStorage[\"check-pause-on-work-start\"] = val;\n});\n\n// .notificationControls\neventDispatcher.on('notify-break:changed', function (val) {\n\tlocalStorage[\"notify-break\"] = val;\n});\neventDispatcher.on('notify-work:changed', function (val) {\n\tlocalStorage[\"notify-work\"] = val;\n});\n\n// .timingComtrols\n// .workTimer\neventDispatcher.on('work-timer:time-set', function (val) {\n\tlocalStorage[\"work-timer\"] = val / 60;\n});\n\n// .breakTimer\neventDispatcher.on('break-timer:time-set', function (val) {\n\tlocalStorage[\"break-timer\"] = val / 60;\n});\n\n// .midPanel\neventDispatcher.on('check-volume:changed', function (val) {\n\tlocalStorage[\"check-volume\"] = val;\n});\neventDispatcher.on('check-clock-seconds:changed', function (val) {\n\tlocalStorage[\"check-clock-seconds\"] = val;\n});\neventDispatcher.on('check-clock-filled:changed', function (val) {\n\tlocalStorage[\"check-clock-filled\"] = val;\n});\neventDispatcher.on('check-progress:changed', function (val) {\n\tlocalStorage[\"check-progress\"] = val;\n});\n\n// alarm sound\neventDispatcher.on('alarm-sound:set', function (sound) {\n\tlocalStorage[\"alarm-sound\"] = sound;\n});\neventDispatcher.on('alarm-sound:reset', function () {\n\tdelete localStorage[\"alarm-sound\"];\n});\n\n// populate localStorage on initial start\nfunction saveInitSettings() {\n\t// .pauseControls\n\teventDispatcher.emit('check-pause-on-break-start:changed', pauseOnBreakStart.checked);\n\teventDispatcher.emit('check-pause-on-work-start:changed', pauseOnWorkStart.checked);\n\n\t// .notificationControls\n\tif (notifyOnBreak) {\n\t\t// check that .notificationControls weren't removed\n\t\teventDispatcher.emit('notify-break:changed', notifyOnBreak.checked);\n\t\teventDispatcher.emit('notify-work:changed', notifyOnWork.checked);\n\t}\n\n\t// .timingComtrols\n\t// .workTimer\n\teventDispatcher.emit(\"work-timer:time-set\", parseInt(workTime.textContent, 10) * 60);\n\n\t// .breakTimer\n\teventDispatcher.emit(\"break-timer:time-set\", parseInt(breakTime.textContent, 10) * 60);\n\n\t// .midPanel\n\teventDispatcher.emit('check-volume:changed', checkVolume.checked);\n\teventDispatcher.emit('check-clock-seconds:changed', checkClockSeconds.checked);\n\teventDispatcher.emit('check-clock-filled:changed', checkClockFilled.checked, true);\n\teventDispatcher.emit('check-progress:changed', checkProgress.checked);\n}\n\n// when all resources are loaded and event listeners connected, try to restore settings\nwindow.addEventListener('DOMContentLoaded', function () {\n\tconsole.log(\"DOM LOADED\");\n\tif (localStorage.getItem(\"check-pause-on-break-start\")) {\n\t\ttry {\n\t\t\trestoreSettings();\n\t\t} catch (e) {\n\t\t\tconsole.log(\"JSON parsing Error\", e);\n\t\t}\n\t}\n\tdocument.querySelector(\".wrapper\").classList.remove(\"transparent\");\n\tsaveInitSettings();\n});\n\n// .midPanel input[type=\"checkbox\"]\n\nvar checkVolume = document.getElementById(\"check-volume\");\nvar checkClockSeconds = document.getElementById(\"check-clock-seconds\");\nvar checkClockFilled = document.getElementById(\"check-clock-filled\");\nvar checkProgress = document.getElementById(\"check-progress\");\n\ncheckVolume.onchange = function () {\n\treturn console.log('changed');\n};\ncheckVolume.oninput = function () {\n\treturn console.log('input');\n};\n\ncheckVolume.addEventListener('change', function () {\n\teventDispatcher.emit('check-volume:changed', this.checked);\n});\n\ncheckClockSeconds.addEventListener('change', function () {\n\teventDispatcher.emit('check-clock-seconds:changed', this.checked);\n});\n\ncheckClockFilled.addEventListener('change', function () {\n\teventDispatcher.emit('check-clock-filled:changed', this.checked);\n});\n\ncheckProgress.addEventListener('change', function () {\n\teventDispatcher.emit('check-progress:changed', this.checked);\n});\n\n// .timingControls > button#skipSession\n\nvar skipSessionBtn = document.getElementById('skipSession');\n\nskipSessionBtn.addEventListener('click', function () {\n\teventDispatcher.emit(\"skip-session-button-clicked\");\n});\n\nvar ArcMask = function () {\n\tfunction ArcMask(element) {\n\t\tvar startX = arguments.length <= 1 || arguments[1] === undefined ? 50 : arguments[1];\n\t\tvar startY = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\t\tvar radius = arguments.length <= 3 || arguments[3] === undefined ? 50 : arguments[3];\n\n\t\t_classCallCheck(this, ArcMask);\n\n\t\tthis._element = element;\n\t\tthis._startX = startX;\n\t\tthis._startY = startY;\n\t\tthis._radius = radius;\n\n\t\tthis._dl = \"M\" + startX + \",\" + startY + \" a\" + radius + \",\" + radius + \" 0\";\n\t}\n\n\t_createClass(ArcMask, [{\n\t\tkey: \"_getNewCoord\",\n\t\tvalue: function _getNewCoord(percent) {\n\t\t\tvar theta = 2 * Math.PI * percent / 100,\n\t\t\t    r = this._radius;\n\t\t\treturn { x: r * Math.sin(theta), y: r * (1 - Math.cos(theta)) };\n\t\t}\n\t}, {\n\t\tkey: \"drawArc\",\n\t\tvalue: function drawArc(percent) {\n\t\t\tpercent = 100 - percent;\n\t\t\tvar dm = void 0;\n\t\t\tvar dr = percent === 100 || percent === 0 ? '' : \"L50,50 z\";\n\t\t\tif (percent <= 50) {\n\t\t\t\tdm = '1,0';\n\t\t\t\tif (percent === 0) percent = .01;\n\t\t\t} else {\n\t\t\t\tdm = '0,0 ';\n\t\t\t}\n\n\t\t\tvar coord = this._getNewCoord(percent);\n\n\t\t\tthis._element.setAttribute('d', this._dl + \" \" + dm + \" \" + coord.x + \",\" + coord.y + \" \" + dr);\n\t\t}\n\t}]);\n\n\treturn ArcMask;\n}();\n\n// .progress > progress#totalProgressBar\n\nvar prgBar = document.getElementById('totalProgressBar');\n\neventDispatcher.on('check-progress:changed', function (on) {\n\tprgBar.classList.toggle('progress-off', !on);\n});\n\n// .svgSpace mask > path#arcMask, .progress > progress#totalProgressBar\n\nvar arcMask = new ArcMask(document.getElementById('arcMask'));\n\neventDispatcher.on('timer:session-in-progress', function (_ref6) {\n\tvar _ref6$session = _ref6.session;\n\tvar name = _ref6$session.name;\n\tvar secondsLeft = _ref6$session.left;\n\tvar secondsTotal = _ref6$session.len;\n\n\tvar percentLeft = Math.round(secondsLeft / secondsTotal * 100);\n\tconsole.log(\"percent left\", percentLeft);\n\tarcMask.drawArc(percentLeft);\n\tprgBar.value = 100 - percentLeft;\n});\n\neventDispatcher.on('timer:session-modified', function (_ref7) {\n\tvar _ref7$modification = _ref7.modification;\n\tvar valueName = _ref7$modification.valueName;\n\tvar seconds = _ref7$modification.newValue;\n\tvar isCurrentSession = _ref7.isCurrentSession;\n\n\t// reset progress indicators when session is modified by the user\n\tif (valueName === \"len\" && isCurrentSession) {\n\t\tarcMask.drawArc(100);\n\t\tprgBar.value = 0;\n\t}\n});\n\n/**\n * Timer with several sessions in order passed to constructor, capable of dispatching events during countdown and between sessions.\n *\n * @param  options  {updateFrequency : 1, loop: true, pauseOnSessionStart: false, pauseOnSessionEnd: false, eventDispatcher: new EventDispatcher}\n\t* @param updateFrequency\tfrequency to call _decrement at on current session, in seconds\n\t* @param loop\twhether to loop to first session upon reaching the end or not\n\t* @param eventDispatcher\tan instance of EventDispatcher class, will be ceated if no existing EventDispatcher is passed\n\t* @param pauseOnSessionStart\twhether to pause when changing to a new session (right after _onSessionProgress is fired, left === len)\n\t* @param pauseOnSessionEnd\twhether to pause when currentSession has elapsed (right after _onSessionProgress is fired, left === 0)\n\t* @param reversed\tgo through sessions array in reverse\n * @param  sessions array of {name: 'work', len: 25}\n\t* @param name\tname of the session\n\t* @param len\tlength of the session in seconds\n */\n\nvar Timer = function (_EventfulClass) {\n\t_inherits(Timer, _EventfulClass);\n\n\t// default values in destructuring assignments don't work in Firefox yet\n\t// constructor({updateFrequency = 1, loop = true, pauseOnSessionStart: false, pauseOnSessionEnd: false, reversed: false, eventDispatcher = new EventDispatcher()}, ...sessions)\n\n\tfunction Timer(options) {\n\t\t_classCallCheck(this, Timer);\n\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Timer).call(this, options.eventDispatcher));\n\n\t\tvar defaultOptions = { updateFrequency: 1, loop: true, pauseOnSessionStart: false, pauseOnSessionEnd: false, reversed: false };\n\n\t\tvar _Object$assign = Object.assign({}, defaultOptions, options);\n\n\t\t_this._updateFrequency = _Object$assign.updateFrequency;\n\t\t_this._loop = _Object$assign.loop;\n\t\t_this._pauseOnSessionStart = _Object$assign.pauseOnSessionStart;\n\t\t_this._pauseOnSessionEnd = _Object$assign.pauseOnSessionEnd;\n\t\t_this._reversed = _Object$assign.reversed;\n\n\n\t\t_this._state = \"idle\";\n\n\t\t// session = {name: 'break', len: 5[seconds] [, skip: false, pauseOnStart: false, pauseOnEnd: false]}\n\n\t\tfor (var _len2 = arguments.length, sessions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t\t\tsessions[_key2 - 1] = arguments[_key2];\n\t\t}\n\n\t\t_this._sessions = sessions;\n\t\tvar startIndex = _this._reversed ? _this._sessions.length - 1 : 0;\n\t\t_this._currentSession = sessions[startIndex];\n\t\t_this._currentSessionIndex = startIndex;\n\n\t\t_this._sessionsByName = {};\n\n\t\tvar _iteratorNormalCompletion = true;\n\t\tvar _didIteratorError = false;\n\t\tvar _iteratorError = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator = sessions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\tvar session = _step.value;\n\n\t\t\t\tTimer.checkTimeValidity(session.len);\n\t\t\t\t_this._sessionsByName[session.name] = session;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError = true;\n\t\t\t_iteratorError = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t_iterator.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn _this;\n\t}\n\n\t_createClass(Timer, [{\n\t\tkey: \"isIdle\",\n\t\tvalue: function isIdle() {\n\t\t\treturn this._state === \"idle\";\n\t\t}\n\t}, {\n\t\tkey: \"isActive\",\n\t\tvalue: function isActive() {\n\t\t\treturn this._state === \"active\";\n\t\t}\n\t}, {\n\t\tkey: \"isPaused\",\n\t\tvalue: function isPaused() {\n\t\t\treturn this._state === \"paused\";\n\t\t}\n\t}, {\n\t\tkey: \"addSession\",\n\t\tvalue: function addSession(session) {\n\t\t\tvar index = arguments.length <= 1 || arguments[1] === undefined ? this._sessions.length : arguments[1];\n\n\t\t\tTimer.checkTimeValidity(session.len);\n\t\t\tthis._sessions.splice(index, 0, session);\n\t\t\tthis._sessionsByName[session.name] = session;\n\n\t\t\t// hotswap sessions if adding in place of currentSession\n\t\t\tvar isCurrentSession = this._currentSessionIndex === index;\n\t\t\tif (isCurrentSession) {\n\t\t\t\tthis._currentSession = session;\n\n\t\t\t\t// if countdown is in progress or paused, reset .left on the new session unless already provided\n\t\t\t\tif (this.isActive() || this.isPaused()) this._resetCurrentSessionIfElapsed();\n\t\t\t}\n\n\t\t\tthis._onSessionModified(session, { valueName: \"new-session\" }, isCurrentSession);\n\t\t}\n\t}, {\n\t\tkey: \"getElapsedSessions\",\n\t\tvalue: function getElapsedSessions() {\n\t\t\treturn this._sessions.filter(function (session) {\n\t\t\t\treturn session.left === 0;\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"getSession\",\n\t\tvalue: function getSession(name) {\n\t\t\treturn this._sessionsByName[name];\n\t\t}\n\t}, {\n\t\tkey: \"getSessionIndex\",\n\t\tvalue: function getSessionIndex(name) {\n\t\t\tvar session = this.getSession(name);\n\t\t\t// no session return -1 index\n\t\t\tif (!session) return -1;\n\n\t\t\treturn this._sessions.indexOf(session);\n\t\t}\n\t}, {\n\t\tkey: \"getSessionByIndex\",\n\t\tvalue: function getSessionByIndex(index) {\n\t\t\treturn this._sessions[index];\n\t\t}\n\t}, {\n\t\tkey: \"setLength\",\n\t\tvalue: function setLength(seconds) {\n\t\t\tvar name = arguments.length <= 1 || arguments[1] === undefined ? this._currentSession.name : arguments[1];\n\t\t\tvar resetCurrentSession = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n\t\t\tTimer.checkTimeValidity(seconds);\n\t\t\tvar settingSession = this._sessionsByName[name];\n\t\t\tif (!settingSession) return;\n\n\t\t\tvar modification = { valueName: \"len\", oldValue: settingSession.len, newValue: seconds };\n\t\t\tsettingSession.len = seconds;\n\n\t\t\tvar isCurrentSession = settingSession === this._currentSession;\n\t\t\tif (isCurrentSession && resetCurrentSession) this.resetCurrentSession();\n\n\t\t\t// first inform of modification\n\t\t\tthis._onSessionModified(settingSession, modification, isCurrentSession);\n\t\t\t// then skip if necessary\n\t\t\tif (seconds === 0 && isCurrentSession) this._sessionTransition();\n\t\t}\n\t}, {\n\t\tkey: \"setTimeLeft\",\n\t\tvalue: function setTimeLeft(seconds) {\n\t\t\tvar name = arguments.length <= 1 || arguments[1] === undefined ? this._currentSession.name : arguments[1];\n\n\t\t\tTimer.checkTimeValidity(seconds);\n\t\t\tvar settingSession = this._sessionsByName[name];\n\t\t\tif (!settingSession) return;\n\n\t\t\tvar modification = { valueName: \"left\", oldValue: settingSession.left, newValue: seconds };\n\t\t\tsettingSession.left = seconds;\n\n\t\t\tvar isCurrentSession = settingSession === this._currentSession;\n\n\t\t\t// first inform of modification\n\t\t\tthis._onSessionModified(settingSession, modification, isCurrentSession);\n\t\t\t// then skip if necessary\n\t\t\tif (seconds === 0 && isCurrentSession) this._sessionTransition();\n\t\t}\n\t}, {\n\t\tkey: \"setSessionToSkip\",\n\t\tvalue: function setSessionToSkip() {\n\t\t\tvar skip = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t\t\tvar name = arguments.length <= 1 || arguments[1] === undefined ? this._currentSession.name : arguments[1];\n\n\t\t\tvar settingSession = this._sessionsByName[name];\n\t\t\tif (!settingSession) return;\n\n\t\t\tvar modification = { valueName: \"skip\", oldValue: settingSession.skip, newValue: skip };\n\t\t\tsettingSession.skip = skip;\n\n\t\t\tvar isCurrentSession = settingSession === this._currentSession;\n\n\t\t\t// first inform of modification\n\t\t\tthis._onSessionModified(settingSession, modification, isCurrentSession);\n\t\t\t// then skip if necessary\n\t\t\tif (skip && isCurrentSession) this._sessionTransition();\n\t\t}\n\t}, {\n\t\tkey: \"setSessionToPauseOnStart\",\n\t\tvalue: function setSessionToPauseOnStart() {\n\t\t\tvar pause = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t\t\tvar name = arguments.length <= 1 || arguments[1] === undefined ? this._currentSession.name : arguments[1];\n\n\t\t\tvar settingSession = this._sessionsByName[name];\n\t\t\tif (!settingSession) return;\n\n\t\t\tvar modification = { valueName: \"pauseOnStart\", oldValue: settingSession.pauseOnStart, newValue: pause };\n\t\t\tsettingSession.pauseOnStart = pause;\n\n\t\t\tvar isCurrentSession = settingSession === this._currentSession;\n\n\t\t\t// first inform of modification\n\t\t\tthis._onSessionModified(settingSession, modification, isCurrentSession);\n\t\t}\n\t}, {\n\t\tkey: \"setSessionToPauseOnEnd\",\n\t\tvalue: function setSessionToPauseOnEnd() {\n\t\t\tvar pause = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t\t\tvar name = arguments.length <= 1 || arguments[1] === undefined ? this._currentSession.name : arguments[1];\n\n\t\t\tvar settingSession = this._sessionsByName[name];\n\t\t\tif (!settingSession) return;\n\n\t\t\tvar modification = { valueName: \"pauseOnEnd\", oldValue: settingSession.pauseOnEnd, newValue: pause };\n\t\t\tsettingSession.pauseOnEnd = pause;\n\n\t\t\tvar isCurrentSession = settingSession === this._currentSession;\n\n\t\t\t// first inform of modification\n\t\t\tthis._onSessionModified(settingSession, modification, isCurrentSession);\n\t\t}\n\t}, {\n\t\tkey: \"start\",\n\t\tvalue: function start() {\n\t\t\tvar reason = arguments.length <= 0 || arguments[0] === undefined ? \"called-from-without\" : arguments[0];\n\n\t\t\t// pause in case active\n\t\t\tthis._pause();\n\t\t\tthis.reset();\n\t\t\tthis.resume(reason);\n\t\t}\n\t}, {\n\t\tkey: \"startFromSession\",\n\t\tvalue: function startFromSession(name) {\n\t\t\tvar reason = arguments.length <= 1 || arguments[1] === undefined ? \"called-from-without\" : arguments[1];\n\n\t\t\t// pause in case active\n\t\t\tthis._pause();\n\n\t\t\tvar session = this.getSession(name);\n\t\t\tif (!session) return;\n\n\t\t\tthis._currentSession = session;\n\t\t\tthis._currentSessionIndex = this._sessions.indexOf(session);\n\t\t\tthis.resetCurrentSession();\n\t\t\tthis.resume(reason);\n\t\t}\n\t}, {\n\t\tkey: \"stop\",\n\t\tvalue: function stop() {\n\t\t\tvar reason = arguments.length <= 0 || arguments[0] === undefined ? \"called-from-without\" : arguments[0];\n\n\t\t\tvar prevState = this._state;\n\t\t\tthis._pause();\n\t\t\tthis.resetOrder();\n\t\t\tthis._state = \"idle\";\n\n\t\t\tthis._onStateChanged(prevState, reason);\n\t\t}\n\t}, {\n\t\tkey: \"pause\",\n\t\tvalue: function pause() {\n\t\t\tvar reason = arguments.length <= 0 || arguments[0] === undefined ? \"called-from-without\" : arguments[0];\n\n\t\t\tvar prevState = this._state;\n\t\t\tthis._pause();\n\t\t\tthis._state = \"paused\";\n\n\t\t\tthis._onStateChanged(prevState, reason);\n\t\t}\n\t}, {\n\t\tkey: \"_pause\",\n\t\tvalue: function _pause() {\n\t\t\tclearInterval(this.intervalId);\n\t\t}\n\t}, {\n\t\tkey: \"resume\",\n\t\tvalue: function resume() {\n\t\t\tvar reason = arguments.length <= 0 || arguments[0] === undefined ? \"called-from-without\" : arguments[0];\n\n\t\t\t// if session is null (when all sessions elapsed and loop === false)\n\t\t\tif (!this._currentSession) return;\n\n\t\t\tvar prevState = this._state;\n\t\t\tthis._resume();\n\t\t\tthis._state = \"active\";\n\n\t\t\tthis._onStateChanged(prevState, reason);\n\t\t}\n\t}, {\n\t\tkey: \"_resume\",\n\t\tvalue: function _resume() {\n\t\t\t// first report current/starting progress\n\t\t\tthis._onSessionProgress();\n\t\t\tthis.intervalId = setInterval(this._decrement.bind(this), this._updateFrequency * 1000); //updateFrequency is in seconds\n\t\t}\n\t}, {\n\t\tkey: \"reset\",\n\t\tvalue: function reset() {\n\t\t\tthis.resetOrder();\n\t\t\tthis.resetCurrentSession();\n\t\t}\n\t}, {\n\t\tkey: \"resetOrder\",\n\t\tvalue: function resetOrder() {\n\t\t\tvar startIndex = this._reversed ? this._sessions.length - 1 : 0;\n\t\t\tthis._currentSession = this._sessions[startIndex];\n\t\t\tthis._currentSessionIndex = startIndex;\n\t\t}\n\t}, {\n\t\tkey: \"resetCurrentSession\",\n\t\tvalue: function resetCurrentSession() {\n\t\t\t// don't manipulate a null session\n\t\t\tif (!this._currentSession) return;\n\t\t\tthis._currentSession.left = this._currentSession.len;\n\t\t}\n\t}, {\n\t\tkey: \"_resetCurrentSessionIfElapsed\",\n\t\tvalue: function _resetCurrentSessionIfElapsed() {\n\t\t\t// don't reset if session.left was set to something else (by the user)\n\t\t\tvar left = this._currentSession.left;\n\t\t\tif (left === undefined || left <= 0) this.resetCurrentSession();\n\t\t}\n\t}, {\n\t\tkey: \"_decrement\",\n\t\tvalue: function _decrement() {\n\t\t\t// if starting with no seconds left, which can happen if session was paused-on-end\n\t\t\tif (this._currentSession.left <= 0) this._sessionTransition();\n\n\t\t\tthis._currentSession.left -= this._updateFrequency;\n\t\t\tconsole.log(\"left\", this._currentSession.left, \", freq\", this._updateFrequency);\n\n\t\t\t// don't actually let it go below 0\n\t\t\tif (this._currentSession.left < 0) this._currentSession.left = 0;\n\n\t\t\tthis._onSessionProgress();\n\n\t\t\t// if timer elapsed\n\t\t\tif (this._currentSession.left === 0) {\n\t\t\t\t// pause if required to at the end of session in progress\n\t\t\t\tif (this._pauseOnEndIfRequired()) return;\n\t\t\t\tthis._sessionTransition();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"_sessionTransition\",\n\t\tvalue: function _sessionTransition() {\n\t\t\tthis._goToNextSession(\"previous-session-ended\");\n\n\t\t\t// if no next session for whatever reason\n\t\t\tif (this._currentSession == null) this.stop(\"no-next-session\");\n\t\t\t// otherwise reset countdown\n\t\t\telse {\n\t\t\t\t\tthis._resetCurrentSessionIfElapsed();\n\t\t\t\t\t// first report current/starting progress\n\t\t\t\t\tthis._onSessionProgress();\n\t\t\t\t\t// pause if required at the start of new session\n\t\t\t\t\tthis._pauseOnStartIfRequired();\n\t\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"_goToNextSession\",\n\t\tvalue: function _goToNextSession(reason) {\n\t\t\tvar prevSession = { session: this._currentSession, index: this._currentSessionIndex };\n\n\t\t\tvar _getNextSession2 = this._getNextSession();\n\n\t\t\tthis._currentSessionIndex = _getNextSession2.index;\n\t\t\tthis._currentSession = _getNextSession2.session;\n\n\t\t\tif (this._currentSession) this._resetCurrentSessionIfElapsed();\n\t\t\tthis._onSessionChanged(prevSession, reason);\n\t\t}\n\t}, {\n\t\tkey: \"_getNextSession\",\n\t\tvalue: function _getNextSession() {\n\t\t\tvar nextSessionIndex = this._currentSessionIndex;\n\n\t\t\tvar nextSession = void 0;\n\n\t\t\t// look for the next non-skipped session in order of this.session\n\t\t\tdo {\n\t\t\t\tthis._reversed ? --nextSessionIndex : ++nextSessionIndex;\n\t\t\t\t// reached last session, loop to start\n\t\t\t\tif (nextSessionIndex === this._sessions.length || nextSessionIndex === -1) {\n\t\t\t\t\tnextSessionIndex = this._reversed ? this._sessions.length - 1 : 0;\n\n\t\t\t\t\t// unless loop option is false\n\t\t\t\t\tif (!this._loop) {\n\t\t\t\t\t\tnextSession = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// looped already to where started, no available sessions found\n\t\t\t\tif (nextSessionIndex === this._currentSessionIndex) {\n\t\t\t\t\tnextSessionIndex = this._reversed ? this._sessions.length - 1 : 0;\n\t\t\t\t\tnextSession = null;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tnextSession = this._sessions[nextSessionIndex];\n\t\t\t} while (nextSession.skip);\n\n\t\t\treturn { index: nextSessionIndex, session: nextSession };\n\t\t}\n\t}, {\n\t\tkey: \"skipToNextSession\",\n\t\tvalue: function skipToNextSession() {\n\t\t\tvar thenPause = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\t\t\tvar resetCurrent = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n\t\t\tthis._skipSession(thenPause, resetCurrent, \"skipped-to-next-session\");\n\t\t}\n\t}, {\n\t\tkey: \"_skipSession\",\n\t\tvalue: function _skipSession(thenPause, resetCurrent, reason) {\n\t\t\t// reset, then skip\n\t\t\tif (resetCurrent) this.resetCurrentSession();\n\t\t\tthis._goToNextSession(reason);\n\t\t\tthis.resetCurrentSession();\n\n\t\t\t// if no next session for whatever reason\n\t\t\tif (this._currentSession == null) return this.stop(\"no-next-session\");\n\n\t\t\tthis._onSessionProgress();\n\n\t\t\tif (thenPause) this.pause(\"paused-on-start\");\n\t\t}\n\t}, {\n\t\tkey: \"skipToPreviousSession\",\n\t\tvalue: function skipToPreviousSession() {\n\t\t\tvar thenPause = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\t\t\tvar resetCurrent = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n\t\t\t// reverse direction\n\t\t\tthis._reversed = !this._reversed;\n\n\t\t\tthis._skipSession(thenPause, resetCurrent, \"skipped-to-previous-session\");\n\n\t\t\t// restore direction\n\t\t\tthis._reversed = !this._reversed;\n\t\t}\n\t}, {\n\t\tkey: \"_pauseOnStartIfRequired\",\n\t\tvalue: function _pauseOnStartIfRequired() {\n\t\t\tvar paused = this._pauseOnSessionStart || this._currentSession.pauseOnStart;\n\t\t\tif (paused) this.pause(\"paused-on-start\");\n\n\t\t\treturn paused;\n\t\t}\n\t}, {\n\t\tkey: \"_pauseOnEndIfRequired\",\n\t\tvalue: function _pauseOnEndIfRequired() {\n\t\t\tvar paused = this.pauseOnSessionEnd || this._currentSession.pauseOnEnd;\n\t\t\tif (paused) this.pause(\"paused-on-end\");\n\n\t\t\treturn paused;\n\t\t}\n\t}, {\n\t\tkey: \"_onStateChanged\",\n\t\tvalue: function _onStateChanged(previousState, reason) {\n\t\t\tconsole.log(\"timer:state-changed\", this._currentSession.name, previousState, \"=>\", this._state);\n\t\t\tthis.emit(\"timer:state-changed\", { previousState: previousState, currentState: this._state, session: this._currentSession, index: this._currentSessionIndex, reason: reason });\n\t\t}\n\t}, {\n\t\tkey: \"_onSessionChanged\",\n\t\tvalue: function _onSessionChanged(ended, reason) {\n\t\t\tconsole.log('timer:session-changed', ended.session, ended.index, \"=>\", this._currentSession, this._currentSessionIndex);\n\t\t\tthis.emit('timer:session-changed', { ended: ended, started: { session: this._currentSession, index: this._currentSessionIndex }, reason: reason });\n\t\t}\n\t}, {\n\t\tkey: \"_onSessionProgress\",\n\t\tvalue: function _onSessionProgress() {\n\t\t\tconsole.log(\"timer:session-in-progress\", this._currentSession.name, this._currentSession.left);\n\t\t\tthis.emit(\"timer:session-in-progress\", { session: this._currentSession, index: this._currentSessionIndex });\n\t\t}\n\n\t\t// fired on setting len, left, skip values or adding a new session via instance methods (not directly through inst.sessions[0].len = ...)\n\n\t}, {\n\t\tkey: \"_onSessionModified\",\n\t\tvalue: function _onSessionModified(session, modification, isCurrentSession) {\n\t\t\t//  modification is of form {valueName: \"new-session\"} or {valueName: \"[value name], oldValue: [number], newValue: [number]\"}\n\t\t\tconsole.log(\"session\", session.name, \"modified\", modification, \", isCurrentSession\", isCurrentSession);\n\t\t\tthis.emit(\"timer:session-modified\", { session: session, modification: modification, isCurrentSession: isCurrentSession, timerState: this.state });\n\t\t}\n\n\t\t// fired on setting updateFrequency and loop values\n\n\t}, {\n\t\tkey: \"_onOptionsModified\",\n\t\tvalue: function _onOptionsModified(modification) {\n\t\t\t//  modification is of form {valueName: \"[value name], oldValue: [number], newValue: [number]\"}\n\t\t\tconsole.log(\"timer:options-modified\", modification, this.state);\n\t\t\tthis.emit(\"timer:options-modified\", { modification: modification, timerState: this.state });\n\t\t}\n\t}, {\n\t\tkey: \"sessions\",\n\t\tget: function get() {\n\t\t\treturn this._sessions;\n\t\t},\n\t\tset: function set(sessions) {\n\t\t\t// remove references to current sessions\n\t\t\tthis._sessionsByName = {};\n\t\t\tthis._sessions = sessions;\n\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\tvar _didIteratorError2 = false;\n\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator2 = sessions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\tvar session = _step2.value;\n\n\t\t\t\t\tTimer.checkTimeValidity(session.len);\n\t\t\t\t\tthis._sessionsByName[session.name] = session;\n\t\t\t\t}\n\n\t\t\t\t// reset progress and order\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t_iteratorError2 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._pause();\n\t\t\tthis.reset();\n\n\t\t\tthis._onSessionModified(sessions, { valueName: \"new-sessions\" });\n\t\t}\n\t}, {\n\t\tkey: \"state\",\n\t\tget: function get() {\n\t\t\treturn this._state;\n\t\t}\n\t}, {\n\t\tkey: \"sessionsCount\",\n\t\tget: function get() {\n\t\t\treturn this._sessions.length;\n\t\t}\n\t}, {\n\t\tkey: \"currentSession\",\n\t\tget: function get() {\n\t\t\treturn this._currentSession;\n\t\t}\n\t}, {\n\t\tkey: \"currentSessionIndex\",\n\t\tget: function get() {\n\t\t\treturn this._currentSessionIndex;\n\t\t}\n\t}, {\n\t\tkey: \"updateFrequency\",\n\t\tget: function get() {\n\t\t\treturn this._updateFrequency;\n\t\t},\n\t\tset: function set(freq) {\n\t\t\tTimer.checkTimeValidity(freq);\n\t\t\tvar modification = { valueName: \"updateFrequency\", oldValue: this._updateFrequency, newValue: freq };\n\t\t\tthis._updateFrequency = freq;\n\n\t\t\tthis._onOptionsModified(modification);\n\t\t\t// restart interval timer with new frequency if in progress\n\t\t\tif (this.isActive()) {\n\t\t\t\tthis._pause();\n\t\t\t\tthis._resume();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"loop\",\n\t\tget: function get() {\n\t\t\treturn this._loop;\n\t\t},\n\t\tset: function set(loop) {\n\t\t\tvar modification = { valueName: \"loop\", oldValue: this._loop, newValue: loop };\n\t\t\tthis._loop = loop;\n\n\t\t\tthis._onOptionsModified(modification);\n\t\t}\n\t}, {\n\t\tkey: \"reversed\",\n\t\tget: function get() {\n\t\t\treturn this._reversed;\n\t\t},\n\t\tset: function set(reversed) {\n\t\t\tvar modification = { valueName: \"reversed\", oldValue: this._reversed, newValue: reversed };\n\t\t\tthis._reversed = reversed;\n\n\t\t\tthis._onOptionsModified(modification);\n\t\t}\n\t}, {\n\t\tkey: \"pauseOnSessionStart\",\n\t\tget: function get() {\n\t\t\treturn this._pauseOnSessionStart;\n\t\t},\n\t\tset: function set(pause) {\n\t\t\tvar modification = { valueName: \"pauseOnSessionStart\", oldValue: this._pauseOnSessionStart, newValue: pause };\n\t\t\tthis._pauseOnSessionStart = pause;\n\n\t\t\tthis._onOptionsModified(modification);\n\t\t}\n\t}, {\n\t\tkey: \"pauseOnSessionEnd\",\n\t\tget: function get() {\n\t\t\treturn this._pauseOnSessionEnd;\n\t\t},\n\t\tset: function set(pause) {\n\t\t\tvar modification = { valueName: \"pauseOnSessionEnd\", oldValue: this._pauseOnSessionEnd, newValue: pause };\n\t\t\tthis._pauseOnSessionEnd = pause;\n\n\t\t\tthis._onOptionsModified(modification);\n\t\t}\n\t}], [{\n\t\tkey: \"checkTimeValidity\",\n\t\tvalue: function checkTimeValidity(seconds) {\n\t\t\tif (seconds < 0 || typeof seconds !== \"number\") throw new RangeError(\"time must be a positive number\");\n\t\t}\n\t}]);\n\n\treturn Timer;\n}(EventfulClass);\n\nvar pomodoroTimer = new Timer({ eventDispatcher: eventDispatcher }, { name: \"work\", len: getWorkTimeSetting() * 60 }, { name: \"break\", len: getBreakTimeSetting() * 60 });\n\neventDispatcher.on('work-timer:time-set', function (seconds) {\n\tpomodoroTimer.setLength(seconds, \"work\", true);\n});\neventDispatcher.on('break-timer:time-set', function (seconds) {\n\tpomodoroTimer.setLength(seconds, \"break\", true);\n});\n\neventDispatcher.on('tomato-big-button-clicked', function () {\n\tswitch (pomodoroTimer.state) {\n\t\tcase \"idle\":\n\t\t\tpomodoroTimer.start();\n\t\t\tbreak;\n\t\tcase \"active\":\n\t\t\tpomodoroTimer.pause();\n\t\t\tbreak;\n\t\tcase \"paused\":\n\t\t\tpomodoroTimer.resume();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn;\n\t}\n});\n\neventDispatcher.on('check-pause-on-break-start:changed', function (on) {\n\tpomodoroTimer.setSessionToPauseOnStart(on, \"break\");\n});\neventDispatcher.on('check-pause-on-work-start:changed', function (on) {\n\tpomodoroTimer.setSessionToPauseOnStart(on, \"work\");\n});\n\neventDispatcher.on('skip-session-button-clicked', function (on) {\n\tpomodoroTimer.skipToNextSession(true);\n});\n\n// .tomatoTimer > .svgSpace #minutesSvg\n\nvar minutesSvg = document.getElementById('minutesSvg');\n\nvar minutesSvgValue = minutesSvg.textContent;\n\nminutesSvg.addEventListener('transitionend', function () {\n\tthis.textContent = minutesSvgValue;\n\tthis.classList.remove('changing');\n});\n\nfunction cancelTransition() {\n\tminutesSvg.classList.remove('changing');\n\tminutesSvg.classList.add('no-transition');\n}\n\nfunction changeMinuteSvg(h, m, changeNow, newSessionStarted) {\n\n\tvar hAndMin = h >= 1 ? h + \":\" + (m < 10 ? \"0\" + m : m) : m;\n\n\tif (minutesSvgValue !== hAndMin) {\n\t\tminutesSvgValue = hAndMin;\n\t}\n\n\tif (newSessionStarted) {\n\t\tminutesSvg.textContent = minutesSvgValue;\n\t}\n\tconsole.log(\"changeNow\", changeNow);\n\n\tif (changeNow) {\n\t\t// turn transitions back on\n\t\tminutesSvg.classList.remove('no-transition');\n\t\t// start transition\n\t\tminutesSvg.classList.add('changing');\n\t}\n}\n\nfunction setImmediateMinuteSvg(h, m) {\n\tvar hAndMin = h >= 1 ? h + \":\" + (m < 10 ? \"0\" + m : m) : m;\n\t// cancel transition in progress if any\n\tcancelTransition();\n\n\tminutesSvgValue = hAndMin;\n\tminutesSvg.textContent = hAndMin;\n}\n\n// .tomatoTimer > .svgSpace #secondsLeft, .tomatoTimer > .seconds\n\nvar secondsLeftCircle = document.getElementById('secondsLeft');\n\nvar r = parseInt(secondsLeftCircle.getAttribute(\"r\"), 10);\nvar fct = Math.round(r * 6.285714286) / 100;\n\n// proper offset to draw 60 cells, 1 cell representing 1 second\nfunction changeCircleDashOffset(secondsLeft) {\n\tvar dashoffset = 100 - secondsLeft * 5 / 3;\n\tconsole.log(\"circle secs\", secondsLeft, \", dashoffset\", dashoffset);\n\tsecondsLeftCircle.style[\"stroke-dashoffset\"] = -fct * dashoffset;\n}\n\nvar secondsLeftText = document.getElementById('secondsLeftText');\n\neventDispatcher.on('check-clock-seconds:changed', function (on) {\n\tsecondsLeftCircle.classList.toggle('invisible', !on);\n});\n\nfunction setSecondsDisplay(seconds) {\n\t// show full circle for *min:00sec exvept for 0min:00sec\n\tchangeCircleDashOffset(seconds === 0 ? 60 : seconds);\n\t// :01 format instead of :1\n\tif (seconds < 10) seconds = \"0\" + seconds;\n\tsecondsLeftText.textContent = \":\" + seconds;\n}\n\n// #minutesSvg, #secondsLeft, .tomatoTimer > .seconds\n\nfunction secondsToHMinSec(seconds) {\n\tvar h = Math.floor(seconds / 3600);\n\tvar m = Math.floor(seconds % 3600 / 60);\n\tvar s = Math.floor(seconds % 3600 % 60);\n\n\treturn { h: h, m: m, s: s };\n}\n\neventDispatcher.on('timer:session-modified', function (_ref8) {\n\tvar _ref8$modification = _ref8.modification;\n\tvar valueName = _ref8$modification.valueName;\n\tvar seconds = _ref8$modification.newValue;\n\tvar isCurrentSession = _ref8.isCurrentSession;\n\n\t// only processes modifications for values of len of currenSession\n\tif (valueName !== \"len\" || !isCurrentSession) return;\n\n\tvar _secondsToHMinSec = secondsToHMinSec(seconds);\n\n\tvar h = _secondsToHMinSec.h;\n\tvar m = _secondsToHMinSec.m;\n\tvar s = _secondsToHMinSec.s;\n\n\n\tsetImmediateMinuteSvg(h, m);\n\tconsole.log(\"setting hAndMin\", h, m, \", sec\", s);\n\tsetSecondsDisplay(s);\n});\n\neventDispatcher.on('timer:session-in-progress', function (_ref9) {\n\tvar _ref9$session = _ref9.session;\n\tvar name = _ref9$session.name;\n\tvar seconds = _ref9$session.left;\n\tvar secondsTotal = _ref9$session.len;\n\n\tconsole.log(\"received seconds\", seconds);\n\n\tvar _secondsToHMinSec2 = secondsToHMinSec(seconds);\n\n\tvar h = _secondsToHMinSec2.h;\n\tvar m = _secondsToHMinSec2.m;\n\tvar s = _secondsToHMinSec2.s;\n\n\n\tchangeMinuteSvg(h, m, s === 0, seconds === secondsTotal);\n\tconsole.log(\"setting hAndMin\", h, m, \", sec\", s);\n\tsetSecondsDisplay(s);\n});\n\n// .tomatoTimer > .seconds and .tomatoTimer > .session\n\nvar sessionText = document.getElementById('sessionName');\n\neventDispatcher.on('timer:session-changed', function (_ref10) {\n\tvar _ref10$started$sessio = _ref10.started.session;\n\tvar sessionName = _ref10$started$sessio.name;\n\tvar seconds = _ref10$started$sessio.len;\n\n\tsessionText.textContent = sessionName;\n\n\t// change page title to reflect current session\n\tdocument.title = sessionName === \"work\" ? \"Work Time\" : \"Break Time\";\n});\n\nvar pausedStateText = document.getElementById('pausedState');\n\neventDispatcher.on('timer:state-changed', function (_ref11) {\n\tvar currentState = _ref11.currentState;\n\tvar sessionName = _ref11.session.name;\n\tvar reason = _ref11.reason;\n\n\tvar paused = currentState === \"paused\";\n\n\tif (paused && reason === \"paused-on-start\") {\n\t\tconsole.log(\"paused-on-start\");\n\t\t// cancel transition in progress if any\n\t\tcancelTransition();\n\t}\n\n\tpausedStateText.classList.toggle(\"hidden\", !paused);\n\n\t// reflect paused state in the page title\n\tvar title = sessionName === \"work\" ? \"Work Time\" : \"Break Time\";\n\tif (paused) title += \" : Paused\";\n\tdocument.title = title;\n});\n\n// otherwise transition replays after the fact as soon as focus returns to the page/tab\ndocument.addEventListener(\"visibilitychange\", function () {\n\tconsole.log(document.visibilityState, minutesSvg.classList.contains('changing'));\n\tif (document.visibilityState === \"visible\") {\n\t\tvar _secondsToHMinSec3 = secondsToHMinSec(pomodoroTimer.currentSession.left == null ? pomodoroTimer.currentSession.len : pomodoroTimer.currentSession.left);\n\n\t\tvar h = _secondsToHMinSec3.h;\n\t\tvar m = _secondsToHMinSec3.m;\n\n\t\tconsole.log(\"After visibility change, HM\", h, m);\n\t\tsetImmediateMinuteSvg(h, m);\n\t}\n});\n\n// .tomatTimer > .svgSpace .all-tomato\n\nvar tomatoSvg = document.querySelector('.all-tomato');\n\neventDispatcher.on('check-clock-filled:changed', function (on, skipTransition) {\n\tif (skipTransition) {\n\t\t// force reflow if necessary\n\t\tif (on !== tomatoSvg.classList.contains('transparent')) return;\n\t\ttomatoSvg.classList.add(\"no-transition\");\n\t\ttomatoSvg.classList.toggle('transparent', !on);\n\t\t// reflow\n\t\ttomatoSvg.clientWidth;\n\t\ttomatoSvg.classList.remove(\"no-transition\");\n\t} else tomatoSvg.classList.toggle('transparent', !on);\n});\n\n// .tomatoTimer\n\nvar tomatoTimerBigButton = document.querySelector('.tomatoTimer');\n\ntomatoTimerBigButton.addEventListener('click', function () {\n\teventDispatcher.emit(\"tomato-big-button-clicked\");\n});\n}());\n","// sound alarm on timer:session-changed\n\neventDispatcher.on('timer:session-changed', function ({reason}) {\n\t// don't fire on skipSession\n\tif(reason === \"previous-session-ended\" && checkVolume.checked)\tplaySound(true);\n});\n\n\n// input[type=\"range\"]#volume\nconst volumeSlider = document.getElementById(\"volume\");\n\nvolumeSlider.oninput = function() {\n\taudio.volume = this.value;\n};\n\nconst fileUpload = document.getElementById(\"file-upload\");\nconst resetUploadBtn = document.getElementById(\"reset-upload-btn\");\n\nfunction setCustomSoundValues() {\n\tresetUploadBtn.textContent = \"Default sound\";\n\tresetUploadBtn.value = \"reset\";\n\tpanel.classList.remove(\"default-sound\");\n}\n\nconst defaultSound = \"/audio/alarm.mp3\";\nconst audio = new Audio(defaultSound);\nresetUploadBtn.addEventListener(\"click\", function() {\n\tif (this.value === \"upload\") {\n\t\t// empty fileUpload.files\n\t\tfileUpload.value = \"\";\n\t\tfileUpload.click();\n\n\t} else {\n\t\trevertToDefault();\n\t}\n});\n\nfunction revertToDefault() {\n\taudio.src = defaultSound;\n\tspeakerContainer.classList.remove(\"playing\");\n\tconsole.log(\"audio state immediate\", audio.paused, audio.currentTime);\n\tconsole.log(\"reverting to default\");\n\tresetUploadBtn.textContent = \"Custom sound\";\n\tresetUploadBtn.value = \"upload\";\n\tpanel.classList.add(\"default-sound\");\n\n\teventDispatcher.emit(\"alarm-sound:reset\");\n}\n\nfileUpload.addEventListener(\"change\", function() {\n\tconsole.log(\"upload change\", this.files);\n\tif (this.files.length === 0) return;\n\thandleFile(this.files[0]);\n\tsetCustomSoundValues();\n});\n\nconst speakerSvg = document.getElementById(\"speakerSvg\");\nconst speakerContainer = speakerSvg.parentElement;\nspeakerSvg.addEventListener(\"click\", () => playSound());\n\nfunction playSound(restart = false) {\n\tif (audio.error || !audio.src) return;\n\tconsole.log(\"AUDIO PAUSED\", audio.paused);\n\n\tif (audio.paused) {\n\t\taudio.play();\n\t}\telse {\n\t\t// play from start if currently playing after being triggered by user\n\t\tif(!restart) audio.pause();\n\t\taudio.currentTime = 0;\n\t}\n}\n\n\nfunction handleFile(file) {\n\tconsole.log(file);\n\tconst reader = new FileReader();\n\treader.onload = function(e) {\n\t\tconsole.log(\"alarm-sound setting\");\n\t\teventDispatcher.emit(\"alarm-sound:set\", audio.src = e.target.result);\n\t\tspeakerContainer.classList.remove(\"playing\");\n\n\t};\n\treader.readAsDataURL(file);\n}\n\n\naudio.addEventListener(\"play\", function() {\n\tconsole.log(\"play\");\n\tspeakerContainer.classList.add(\"playing\");\n\tstartSpeakerTremble();\n});\naudio.addEventListener(\"pause\", function() {\n\tconsole.log(\"pause\");\n\tspeakerContainer.classList.remove(\"playing\");\n\tstopSpeakerTremble();\n});\n\naudio.addEventListener(\"canplay\", function() {\n\tconsole.log(\"canplay\");\n\tspeakerContainer.classList.remove(\"error\");\n\tif(audio.paused) stopSpeakerTremble();\n});\naudio.addEventListener(\"error\", function(e) {\n\tconsole.log(\"error\", e, audio.error, \"code\", audio.error.code);\n\tspeakerContainer.classList.add(\"error\");\n\tstopSpeakerTremble();\n});\n\n// animate .speaker\nconst turbulence = document.getElementById(\"feTurbulence6680\");\nconst speakerInner = document.getElementById(\"speakerInner\");\nfunction speakerTremble(){\n\tturbulence.seed.baseVal = (turbulence.seed.baseVal + 1) % 100;\n\tspeakerInner.r.baseVal.value += speakerTremble.radCoeff * 0.5;\n\tif(speakerInner.r.baseVal.value > 25) speakerTremble.radCoeff = -1;\n\telse if(speakerInner.r.baseVal.value < 20) speakerTremble.radCoeff = 1;\n\n\tif(speakerTremble.on) requestAnimationFrame(speakerTremble);\n}\nspeakerTremble.on = false;\nspeakerTremble.radCoeff = 1;\nfunction startSpeakerTremble() {\n\tspeakerTremble.on = true;\n\tturbulence.numOctaves.baseVal = 5;\n\trequestAnimationFrame(speakerTremble);\n}\nfunction stopSpeakerTremble() {\n\tspeakerTremble.on = false;\n\tturbulence.numOctaves.baseVal = 0;\n}\n\n\n// drag & drop in .panel.audioControls\nconst panel = document.getElementById(\"speakerPanel\");\n/* events fired on the drop targets */\npanel.addEventListener(\"dragover\", function(e) {\n\t// prevent default to allow drop\n\t//console.log(\"dragover\", e.target);\n\te.stopPropagation();\n\te.preventDefault();\n});\n\npanel.addEventListener(\"dragenter\", function(e) {\n\t// indicate .panel as a .dropzone\n\te.stopPropagation();\n\te.preventDefault();\n\t//console.log(\"dragenter\", e.target);\n\tpanel.classList.add(\"dropzone\");\n});\n\npanel.addEventListener(\"dragend\", function(e) {\n\te.stopPropagation();\n\te.preventDefault();\n\t//console.log(\"dragend\", e.target);\n\tpanel.classList.remove(\"dropzone\");\n});\n\npanel.addEventListener(\"dragleave\", function(e) {\n\te.stopPropagation();\n\te.preventDefault();\n\ttoggleDropzone(e);\n});\n\n\npanel.addEventListener(\"drop\", function(e) {\n\t// prevent default action (open as link for some elements)\n\te.stopPropagation();\n\te.preventDefault();\n\tconsole.log(\"drop\", e.target);\n\tpanel.classList.remove(\"dropzone\");\n\n\tconst file = e.dataTransfer.files[0];\n\tif(file.type.indexOf(\"audio/\") === 0) {\n\t\thandleFile(file);\n\t\tsetCustomSoundValues();\n\t}\n});\n\nfunction toggleDropzone(e) {\n\treturn panel.classList.toggle(\"dropzone\", panel.contains(document.elementFromPoint(e.clientX, e.clientY)));\n}\n","// .globalSettings > .pauseControls\n\nconst pauseOnBreakStart = document.getElementById(\"pause-on-break-start\");\nconst pauseOnWorkStart = document.getElementById(\"pause-on-work-start\");\n\n\npauseOnBreakStart.addEventListener('change', function () {\n\tconsole.log(this, \"changed to\", this.checked ? \"checked\" : \"unchecked\");\n\teventDispatcher.emit('check-pause-on-break-start:changed', this.checked);\n});\npauseOnWorkStart.addEventListener('change', function () {\n\tconsole.log(this, \"changed to\", this.checked ? \"checked\" : \"unchecked\");\n\teventDispatcher.emit('check-pause-on-work-start:changed', this.checked);\n});\n\n\n// .globalSettings > .notificationControls\n\nlet notifyOnBreak = document.getElementById(\"notify-break\");\nlet notifyOnWork = document.getElementById(\"notify-work\");\n\nnotifyOnBreak.addEventListener('change', function () {\n\tconsole.log(this, \"changed to\", this.checked ? \"checked\" : \"unchecked\");\n\teventDispatcher.emit('notify-break:changed', this.checked);\n});\nnotifyOnWork.addEventListener('change', function () {\n\tconsole.log(this, \"changed to\", this.checked ? \"checked\" : \"unchecked\");\n\teventDispatcher.emit('notify-work:changed', this.checked);\n});\n\n\nnotifyOnBreak.onclick = notifyOnWork.onclick = askForPermission;\n\n(function () {\n\t// if notifications aren't supported, remove the panel\n\tif (!(\"Notification\" in window)) {\n\t\t// don't keep references\n\t\tnotifyOnBreak = notifyOnWork = null;\n\t\tconst notificationPanel = document.querySelector('.notificationControls');\n\t\tnotificationPanel.parentNode.removeChild(notificationPanel);\n\t}else if (Notification.permission === 'denied') {\n\t\tdisableNotifyChecks();\n\t}\n})();\n\nfunction askForPermission() {\n\t// if any notification checkbox is checked\n\tif(notifyOnBreak.checked || notifyOnWork.checked) testForNotification();\n}\n\nfunction disableNotifyChecks() {\n\tnotifyOnBreak.disabled = notifyOnWork.disabled = true;\n\tnotifyOnBreak.checked = notifyOnWork.checked = false;\n}\n\nfunction testForNotification() {\n\t// if already granted\n\tif (Notification.permission === \"granted\") return;\n\n\t// if permission wasn't denied previously\n\tif (Notification.permission !== 'denied') {\n\t\t// returns a Promise resolved with granted or denied, doesn't do anything on default (when dismissed)\n\t\tNotification.requestPermission().then(function (result) {\n\t\t\tif(result === \"denied\") {\n\t\t\t\t// ask only once\n\t\t\t\tnotifyOnBreak.onclick = notifyOnWork.onclick = null;\n\t\t\t\t// if no permission, uncheck and disable\n\t\t\t\tdisableNotifyChecks();\n\t\t\t} else if(result === \"granted\") {\n\t\t\t\t// ask only once\n\t\t\t\tnotifyOnBreak.onclick = notifyOnWork.onclick = null;\n\t\t\t}\n\t\t\t// don't do anything === ask again later if(result === \"default\")\n\t\t\tconsole.log(\"NOTIFY REQUEST\", result);\n\t\t});\n\t}\n}\n\n// keep reference to last notification\nlet notification;\n\n// dismiss notfication if clicked anywhere on the page\ndocument.addEventListener(\"click\", () => {\n\tif(notification) notification.close();\n})\n\nfunction fireNotification(sessionName) {\n\t// if .notificationControls has been removed\n\tif(notifyOnBreak === null) return;\n\t// only if permission is granted explicitly\n\tif (Notification.permission !== \"granted\") return;\n\n\tconst itsBreakTime = sessionName === \"break\";\n\tif((itsBreakTime && notifyOnBreak.checked) || (!itsBreakTime && notifyOnWork.checked)) {\n\t\tnotification = buildNotification(itsBreakTime);\n\t\tnotification.onclose = function () {\n\t\t\tconsole.log(\"notification closed\");\n\t\t\t// don't keep the reference\n\t\t\tnotification = null;\n\t\t};\n\t\tnotification.onclick = function () {\n\t\t\tconsole.log(\"notification clicked\");\n\t\t\twindow.focus();\n\t\t\tnotification.close();\n\t\t};\n\t\tconsole.log(notification);\n\t}\n}\n\nconst icon = \"/images/clock_red.png\";\n\nfunction buildNotification(itsBreakTime) {\n\tconst title = itsBreakTime ? \"Time for a Break\" : \"Time for Work\";\n\tconst body = itsBreakTime ? \"Good work! Time for a break.\" : \"Ready for more? Time for work.\";\n\n\tconsole.log(\"FIRING NOTIFICATION\");\n\n\treturn new Notification(title, {body, icon});\n}\n\neventDispatcher.on('timer:session-changed', ({started: {session: {name}}, reason}) => {\n\tconsole.log(\"session started\", name, \"for reason\", reason);\n\t// don't Notification fire on skipSession\n\tif(reason === \"previous-session-ended\")\tfireNotification(name);\n});\n","// .pomodoroDefaults button\n\nconst work25 = document.getElementById('work-25');\nconst shortBreak5 = document.getElementById('short-break-5');\nconst longBreak15 = document.getElementById('long-break-15');\nconst longBreak30 = document.getElementById('long-break-30');\n\nwork25.addEventListener('click', function () {\n\teventDispatcher.emit(\"work-timer:set\", 25);\n});\nshortBreak5.addEventListener('click', function () {\n\teventDispatcher.emit(\"break-timer:set\", 5);\n});\nlongBreak15.addEventListener('click', function () {\n\teventDispatcher.emit(\"break-timer:set\", 15);\n});\nlongBreak30.addEventListener('click', function () {\n\teventDispatcher.emit(\"break-timer:set\", 30);\n});\n\n// button.plus and .minus in .timingControls > .workTimer and. breakTimer\n\nconst workPlus = document.querySelector('.workTimer > .plus');\nconst workMinus = document.querySelector('.workTimer > .minus');\n\nconst breakPlus = document.querySelector('.breakTimer > .plus');\nconst breakMinus = document.querySelector('.breakTimer > .minus');\n\nlet multiplier = 1;\n\ndocument.addEventListener(\"keydown\", function (e) {\n\t// keyCode 16 = SHIFT\n\tif(e.keyCode === 16) {\n\t\tconsole.log(\"SHIFT PRESSED\");\n\t\tmultiplier = 5;\n\t}\n});\ndocument.addEventListener(\"keyup\", function(e) {\n\tif(e.keyCode === 16) {\n\t\tconsole.log(\"SHIFT RELEASED\");\n\t\tmultiplier = 1;\n\t}\n});\n\nfunction workIncrement() {\n\teventDispatcher.emit('work-timer:++', multiplier);\n}\nfunction workDecrement() {\n\teventDispatcher.emit('work-timer:--', multiplier);\n}\n\nfunction breakIncrement() {\n\tconsole.log(\"breakincr\");\n\teventDispatcher.emit('break-timer:++', multiplier);\n}\nfunction breakDecrement() {\n\teventDispatcher.emit('break-timer:--', multiplier);\n}\n\nfunction repeatFunction(repeatF, freq = 200) {\n\tlet intervalId;\n\tfunction start() {\n\t\trepeatF();\n\t\tintervalId = setInterval(repeatF, freq);\n\t}\n\tfunction stop() {\n\t\tclearInterval(intervalId);\n\t}\n\n\treturn {start, stop};\n}\n\nfunction connectButtonOnOff(btn, {start, stop}) {\n\tbtn.addEventListener('mousedown', start);\n\tbtn.addEventListener('mouseup', stop);\n\tbtn.addEventListener('mouseleave', stop);\n}\n\nconst workIncrementRepeat = repeatFunction(workIncrement);\nconst workDecrementRepeat = repeatFunction(workDecrement);\n\nconst breakIncrementRepeat = repeatFunction(breakIncrement);\nconst breakDecrementRepeat = repeatFunction(breakDecrement);\n\n\nconnectButtonOnOff(workPlus, workIncrementRepeat);\nconnectButtonOnOff(workMinus, workDecrementRepeat);\n\nconnectButtonOnOff(breakPlus, breakIncrementRepeat);\nconnectButtonOnOff(breakMinus, breakDecrementRepeat);\n\n\nfunction connectKeydown(btn, fn) {\n\tbtn.addEventListener('keydown', function(e) {\n\t\t// keyCode 32 = space, 13 = Enter, 16 = Shift\n\t\tif(e.keyCode === 32 || e.keyCode === 13) {\n\t\t\tfn();\n\t\t}\n\t});\n}\n\nconnectKeydown(workPlus, workIncrement);\nconnectKeydown(workMinus, workDecrement);\n\nconnectKeydown(breakPlus, breakIncrement);\nconnectKeydown(breakMinus, breakDecrement);\n\nfunction disableBtn(disable, btnName) {\n\tif(btnName === \"work\") {\n\t\twork25.disabled = workMinus.disabled = workPlus.disabled = disable;\n\n\t\t// stop incr/decrementing if in progress\n\t\tworkIncrementRepeat.stop();\n\t\tworkDecrementRepeat.stop();\n\n\t}else if (btnName === \"break\") {\n\t\tlongBreak30.disabled = longBreak15.disabled = shortBreak5.disabled = breakMinus.disabled = breakPlus.disabled = disable;\n\n\t\t// stop incr/decrementing if in progress\n\t\tbreakIncrementRepeat.stop();\n\t\tbreakDecrementRepeat.stop();\n\t}\n}\n\n\neventDispatcher.on('timer:state-changed', ({currentState, session: {name: sessionName}}) => {\n\tdisableBtn(currentState === \"active\", sessionName);\n});\neventDispatcher.on('timer:session-changed', ({ended: {session: {name: endedSessionName}}, started: {session: {name: startedSessionName}}}) => {\n\tdisableBtn(false, endedSessionName);\n\tdisableBtn(true, startedSessionName);\n});\n","// .time in .timingControls > .workTimer and .breakTimer\n\nconst workTime = document.querySelector('.workTimer > .time');\nconst breakTime = document.querySelector('.breakTimer > .time');\n\nfunction getWorkTimeSetting() {\n\treturn parseInt(workTime.textContent, 10);\n}\n\nfunction getBreakTimeSetting() {\n\treturn parseInt(breakTime.textContent, 10);\n}\n\nfunction getValidTime(val) {\n\treturn val < 1 ? 1 : val;\n}\n\nfunction emitControlTimerChange(timer, val) {\n\t// \"work-timer:time-set\" or \"break-timer:time-set\"\n\teventDispatcher.emit(timer + \"-timer:time-set\", val * 60);\n}\n\neventDispatcher.on('work-timer:++', (multiplier = 1) => {\n\tconst oldVal = parseInt(workTime.textContent, 10);\n\tlet newVal =  oldVal + 1 * multiplier;\n\tnewVal = getValidTime(newVal);\n\tif(oldVal === newVal) return;\n\tworkTime.textContent = newVal;\n\n\temitControlTimerChange(\"work\", newVal);\n});\neventDispatcher.on('work-timer:--', (multiplier = 1) => {\n\tconst oldVal = parseInt(workTime.textContent, 10);\n\tlet newVal =  oldVal - 1 * multiplier;\n\tnewVal = getValidTime(newVal);\n\tif(oldVal === newVal) return;\n\tworkTime.textContent = newVal;\n\n\temitControlTimerChange(\"work\", newVal);\n});\neventDispatcher.on('work-timer:set', (minutes) => {\n\tif(parseInt(workTime.textContent, 10) === minutes) return;\n\tworkTime.textContent = minutes;\n\n\temitControlTimerChange(\"work\", minutes);\n});\n\neventDispatcher.on('break-timer:++', (multiplier = 1) => {\n\tconst oldVal = parseInt(breakTime.textContent, 10);\n\tlet newVal =  oldVal + 1 * multiplier;\n\tnewVal = getValidTime(newVal);\n\tif(oldVal === newVal) return;\n\tbreakTime.textContent = newVal;\n\n\temitControlTimerChange(\"break\", newVal);\n});\neventDispatcher.on('break-timer:--', (multiplier = 1) => {\n\tconst oldVal = parseInt(breakTime.textContent, 10);\n\tlet newVal =  oldVal - 1 * multiplier;\n\tnewVal = getValidTime(newVal);\n\tif(oldVal === newVal) return;\n\tbreakTime.textContent = newVal;\n\n\temitControlTimerChange(\"break\", newVal);\n});\neventDispatcher.on('break-timer:set', (minutes) => {\n\tif(parseInt(breakTime.textContent, 10) === minutes) return;\n\tbreakTime.textContent = minutes;\n\n\temitControlTimerChange(\"break\", minutes);\n});\n","// store user settings between sessions\n\nfunction parseStoredItem(keyName) {\n\treturn JSON.parse(localStorage[keyName]);\n}\n\nfunction restoreSettings() {\n\t// .pauseControls\n\tpauseOnBreakStart.checked = parseStoredItem(\"check-pause-on-break-start\");\n\tpauseOnWorkStart.checked = parseStoredItem(\"check-pause-on-work-start\");\n\n\t// .notificationControls\n\tif(notifyOnBreak && (\"Notification\" in window) && Notification.permission === \"granted\"){\n\t\t// check that .notificationControls weren't removed\n\t\tnotifyOnBreak.checked = parseStoredItem(\"notify-break\");\n\t\tnotifyOnWork.checked = parseStoredItem(\"notify-work\");\n\t}\n\n\t// .timingComtrols\n\t// .workTimer\n\tworkTime.textContent = parseStoredItem(\"work-timer\");\n\n\t// .breakTimer\n\tbreakTime.textContent = parseStoredItem(\"break-timer\");\n\n\t// .midPanel\n\tcheckVolume.checked = parseStoredItem(\"check-volume\");\n\tcheckClockSeconds.checked = parseStoredItem(\"check-clock-seconds\");\n\tcheckClockFilled.checked = parseStoredItem(\"check-clock-filled\");\n\tcheckProgress.checked = parseStoredItem(\"check-progress\");\n\n\t// alarm sound; a string, so don't parse\n\tconst alarmSound = localStorage[\"alarm-sound\"];\n\t// if alarm-sound exists assign it and set custom values where necessary, otherwise set defaultSound and don't touch the values\n\tif(alarmSound) {\n\t\taudio.src = alarmSound;\n\t\tsetCustomSoundValues();\n\t}\n}\n\n\n// update localStorage on settings changes\n// .pauseControls\neventDispatcher.on('check-pause-on-break-start:changed', (val) => {\n\tlocalStorage[\"check-pause-on-break-start\"] = val;\n});\neventDispatcher.on('check-pause-on-work-start:changed', (val) => {\n\tlocalStorage[\"check-pause-on-work-start\"] = val;\n});\n\n// .notificationControls\neventDispatcher.on('notify-break:changed', (val) => {\n\tlocalStorage[\"notify-break\"] = val;\n});\neventDispatcher.on('notify-work:changed', (val) => {\n\tlocalStorage[\"notify-work\"] = val;\n});\n\n// .timingComtrols\n// .workTimer\neventDispatcher.on('work-timer:time-set', (val) => {\n\tlocalStorage[\"work-timer\"] = val/60;\n});\n\n// .breakTimer\neventDispatcher.on('break-timer:time-set', (val) => {\n\tlocalStorage[\"break-timer\"] = val/60;\n});\n\n// .midPanel\neventDispatcher.on('check-volume:changed', (val) => {\n\tlocalStorage[\"check-volume\"] = val;\n});\neventDispatcher.on('check-clock-seconds:changed', (val) => {\n\tlocalStorage[\"check-clock-seconds\"] = val;\n});\neventDispatcher.on('check-clock-filled:changed', (val) => {\n\tlocalStorage[\"check-clock-filled\"] = val;\n});\neventDispatcher.on('check-progress:changed', (val) => {\n\tlocalStorage[\"check-progress\"] = val;\n});\n\n// alarm sound\neventDispatcher.on('alarm-sound:set', (sound) => {\n\tlocalStorage[\"alarm-sound\"] = sound;\n});\neventDispatcher.on('alarm-sound:reset', () => {\n\tdelete localStorage[\"alarm-sound\"];\n});\n\n\n// populate localStorage on initial start\nfunction saveInitSettings() {\n\t// .pauseControls\n\teventDispatcher.emit('check-pause-on-break-start:changed', pauseOnBreakStart.checked);\n\teventDispatcher.emit('check-pause-on-work-start:changed', pauseOnWorkStart.checked);\n\n\t// .notificationControls\n\tif(notifyOnBreak){\n\t\t// check that .notificationControls weren't removed\n\t\teventDispatcher.emit('notify-break:changed', notifyOnBreak.checked);\n\t\teventDispatcher.emit('notify-work:changed', notifyOnWork.checked);\n\t}\n\n\t// .timingComtrols\n\t// .workTimer\n\teventDispatcher.emit(\"work-timer:time-set\", parseInt(workTime.textContent, 10) * 60);\n\n\t// .breakTimer\n\teventDispatcher.emit(\"break-timer:time-set\", parseInt(breakTime.textContent, 10) * 60);\n\n\t// .midPanel\n\teventDispatcher.emit('check-volume:changed', checkVolume.checked);\n\teventDispatcher.emit('check-clock-seconds:changed', checkClockSeconds.checked);\n\teventDispatcher.emit('check-clock-filled:changed', checkClockFilled.checked, true);\n\teventDispatcher.emit('check-progress:changed', checkProgress.checked);\n}\n\n// when all resources are loaded and event listeners connected, try to restore settings\nwindow.addEventListener('DOMContentLoaded', function () {\n\tconsole.log(\"DOM LOADED\");\n\tif(localStorage.getItem(\"check-pause-on-break-start\")) {\n\t\ttry {\n\t\t\trestoreSettings();\n\t\t} catch (e) {\n\t\t\tconsole.log(\"JSON parsing Error\", e);\n\t\t}\n\t}\n\tdocument.querySelector(\".wrapper\").classList.remove(\"transparent\");\n\tsaveInitSettings();\n});\n","// .tomatoTimer > .svgSpace #minutesSvg\n\nconst minutesSvg = document.getElementById('minutesSvg');\n\nlet minutesSvgValue = minutesSvg.textContent;\n\nminutesSvg.addEventListener('transitionend', function() {\n\tthis.textContent = minutesSvgValue;\n\tthis.classList.remove('changing');\n});\n\nfunction cancelTransition() {\n\tminutesSvg.classList.remove('changing');\n\tminutesSvg.classList.add('no-transition');\n}\n\nfunction changeMinuteSvg(h, m, changeNow, newSessionStarted) {\n\n\tconst hAndMin = h >= 1 ? `${h}:${m<10 ? \"0\"+m : m}` : m;\n\n\tif(minutesSvgValue !== hAndMin) {\n\t\tminutesSvgValue = hAndMin;\n\t}\n\n\tif(newSessionStarted) {\n\t\tminutesSvg.textContent = minutesSvgValue;\n\t}\n\tconsole.log(\"changeNow\", changeNow);\n\n\tif(changeNow) {\n\t\t// turn transitions back on\n\t\tminutesSvg.classList.remove('no-transition');\n\t\t// start transition\n\t\tminutesSvg.classList.add('changing');\n\t}\n}\n\nfunction setImmediateMinuteSvg(h, m) {\n\tconst hAndMin = h >= 1 ? `${h}:${m<10 ? \"0\"+m : m}` : m;\n\t// cancel transition in progress if any\n\tcancelTransition();\n\n\tminutesSvgValue = hAndMin;\n\tminutesSvg.textContent = hAndMin;\n}\n\n\n// .tomatoTimer > .svgSpace #secondsLeft, .tomatoTimer > .seconds\n\nconst secondsLeftCircle = document.getElementById('secondsLeft');\n\nconst r = parseInt(secondsLeftCircle.getAttribute(\"r\"), 10);\nconst fct = Math.round(r * 6.285714286)/100;\n\n// proper offset to draw 60 cells, 1 cell representing 1 second\nfunction changeCircleDashOffset(secondsLeft) {\n\tlet dashoffset = 100 - secondsLeft * 5 / 3;\n\tconsole.log(\"circle secs\", secondsLeft, \", dashoffset\", dashoffset);\n\tsecondsLeftCircle.style[\"stroke-dashoffset\"] = -fct * dashoffset;\n}\n\nconst secondsLeftText = document.getElementById('secondsLeftText');\n\neventDispatcher.on('check-clock-seconds:changed', (on) => {\n\tsecondsLeftCircle.classList.toggle('invisible', !on);\n});\n\nfunction setSecondsDisplay(seconds) {\n\t// show full circle for *min:00sec exvept for 0min:00sec\n\tchangeCircleDashOffset(seconds === 0 ? 60 : seconds);\n\t// :01 format instead of :1\n\tif(seconds < 10) seconds = \"0\" + seconds;\n\tsecondsLeftText.textContent = \":\" + seconds;\n}\n\n\n// #minutesSvg, #secondsLeft, .tomatoTimer > .seconds\n\nfunction secondsToHMinSec(seconds) {\n\tconst h = Math.floor(seconds / 3600);\n\tconst m = Math.floor(seconds % 3600 / 60);\n\tconst s = Math.floor(seconds % 3600 % 60);\n\n\treturn {h, m, s};\n}\n\neventDispatcher.on('timer:session-modified', ({modification: {valueName, newValue: seconds}, isCurrentSession}) => {\n\t// only processes modifications for values of len of currenSession\n\tif(valueName !== \"len\" || !isCurrentSession) return;\n\tconst {h, m, s} = secondsToHMinSec(seconds);\n\n\tsetImmediateMinuteSvg(h, m);\n\tconsole.log(\"setting hAndMin\", h,m, \", sec\", s);\n\tsetSecondsDisplay(s);\n});\n\neventDispatcher.on('timer:session-in-progress', ({session: {name, left: seconds, len: secondsTotal}}) => {\n\tconsole.log(\"received seconds\", seconds);\n\tconst {h, m, s} = secondsToHMinSec(seconds);\n\n\tchangeMinuteSvg(h, m, s === 0, seconds === secondsTotal);\n\tconsole.log(\"setting hAndMin\", h,m, \", sec\", s);\n\tsetSecondsDisplay(s);\n});\n\n\n// .tomatoTimer > .seconds and .tomatoTimer > .session\n\nconst sessionText = document.getElementById('sessionName');\n\neventDispatcher.on('timer:session-changed', ({started: {session: {name: sessionName, len: seconds}}}) => {\n\tsessionText.textContent = sessionName;\n\n\t// change page title to reflect current session\n\tdocument.title = sessionName === \"work\" ? \"Work Time\" : \"Break Time\";\n});\n\nconst pausedStateText = document.getElementById('pausedState');\n\neventDispatcher.on('timer:state-changed', ({currentState, session: {name: sessionName}, reason}) => {\n\tconst paused = currentState === \"paused\";\n\n\tif(paused && reason === \"paused-on-start\") {\n\t\tconsole.log(\"paused-on-start\");\n\t\t// cancel transition in progress if any\n\t\tcancelTransition();\n\t}\n\n\tpausedStateText.classList.toggle(\"hidden\", !paused);\n\n\t// reflect paused state in the page title\n\tlet title = sessionName === \"work\" ? \"Work Time\" : \"Break Time\";\n\tif(paused) title += \" : Paused\";\n\tdocument.title = title;\n});\n\n\n// otherwise transition replays after the fact as soon as focus returns to the page/tab\ndocument.addEventListener(\"visibilitychange\", function() {\n  console.log( document.visibilityState, minutesSvg.classList.contains('changing'));\n\tif(document.visibilityState === \"visible\") {\n\t\tconst {h, m} = secondsToHMinSec(pomodoroTimer.currentSession.left == null ? pomodoroTimer.currentSession.len : pomodoroTimer.currentSession.left);\n\t\tconsole.log(\"After visibility change, HM\", h, m);\n\t\tsetImmediateMinuteSvg(h, m);\n\t}\n\n});\n","//events - a super-basic Javascript (publish subscribe) pattern\n\nclass EventDispatcher {\n\n\tconstructor() {\n\t\tthis.events = {};\n\t}\n\n\t// subscribe fn to event\n\ton(eventName, fn) {\n\t\tthis.events[eventName] ? this.events[eventName].push(fn) : this.events[eventName] = [fn];\n\t}\n\n\t// unsubscribe fn from event\n\toff(eventName, fn) {\n\t\tif (fn == undefined) {\n\t\t\t// unsubscribe all\n\t\t\tthis.events[eventName] = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\tlet events = this.events[eventName];\n\t\tif (events) {\n\t\t\tlet foundIndex = events.indexOf(fn);\n\t\t\tif (foundIndex !== -1) {\n\t\t\t\tevents.splice(foundIndex, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t// fire off an event\n\temit(eventName, ...data) {\n\t\tif (this.events[eventName]) {\n\t\t\tthis.events[eventName].forEach(function(fn) {\n\t\t\t\tfn(...data);\n\t\t\t});\n\t\t}\n\t}\n\n}\n\nclass EventfulClass {\n\tconstructor(eventDispatcher = new EventDispatcher()) {\n\t\tif(!(eventDispatcher instanceof EventDispatcher)) throw new TypeError(\"eventDispatcher must be an instance of EventDispatcher\");\n\t\tthis._dispatcher = eventDispatcher;\n\t}\n\n\tget dispatcher() {\n\t\treturn this._dispatcher;\n\t}\n\n\ton(...args) {\n\t\tthis.dispatcher.on(...args);\n\t}\n\n\toff(...args) {\n\t\tthis.dispatcher.off(...args);\n\t}\n\n\temit(...args) {\n\t\tthis.dispatcher.emit(...args);\n\t}\n}\n\n\nconst eventDispatcher = new EventDispatcher();\n","// .midPanel input[type=\"checkbox\"]\n\nconst checkVolume = document.getElementById(\"check-volume\");\nconst checkClockSeconds = document.getElementById(\"check-clock-seconds\");\nconst checkClockFilled = document.getElementById(\"check-clock-filled\");\nconst checkProgress = document.getElementById(\"check-progress\");\n\ncheckVolume.onchange = () => console.log('changed');\ncheckVolume.oninput = () => console.log('input');\n\ncheckVolume.addEventListener('change', function () {\n\teventDispatcher.emit('check-volume:changed', this.checked);\n});\n\ncheckClockSeconds.addEventListener('change', function () {\n\teventDispatcher.emit('check-clock-seconds:changed', this.checked);\n});\n\ncheckClockFilled.addEventListener('change', function () {\n\teventDispatcher.emit('check-clock-filled:changed', this.checked);\n});\n\ncheckProgress.addEventListener('change', function () {\n\teventDispatcher.emit('check-progress:changed', this.checked);\n});\n\n\n// .timingControls > button#skipSession\n\nconst skipSessionBtn = document.getElementById('skipSession');\n\nskipSessionBtn.addEventListener('click', () => {\n\teventDispatcher.emit(\"skip-session-button-clicked\");\n});\n","class ArcMask {\n\tconstructor(element, startX = 50, startY = 0, radius = 50) {\n\t\tthis._element = element;\n\t\tthis._startX = startX;\n\t\tthis._startY = startY;\n\t\tthis._radius = radius;\n\n\t\tthis._dl = `M${startX},${startY} a${radius},${radius} 0`;\n\t}\n\n\t_getNewCoord(percent) {\n\t\tlet theta = 2 * Math.PI * percent / 100, r = this._radius;\n\t\treturn {x: r * Math.sin(theta), y: r * (1 - Math.cos(theta))};\n\t}\n\n\tdrawArc(percent) {\n\t\tpercent = 100 - percent;\n\t\tlet dm;\n\t\tlet dr = (percent === 100 || percent === 0) ? '' : \"L50,50 z\";\n\t\tif(percent <= 50) {\n\t\t\tdm = '1,0';\n\t\t\tif(percent === 0) percent = .01;\n\t\t} else {\n\t\t\tdm = '0,0 ';\n\t\t}\n\n\t\tlet coord = this._getNewCoord(percent);\n\n\n\t\tthis._element.setAttribute('d', `${this._dl} ${dm} ${coord.x},${coord.y} ${dr}`);\n\t}\n\n}\n\n\n// .progress > progress#totalProgressBar\n\nconst prgBar = document.getElementById('totalProgressBar');\n\neventDispatcher.on('check-progress:changed', (on) => {\n\tprgBar.classList.toggle('progress-off', !on);\n});\n\n\n// .svgSpace mask > path#arcMask, .progress > progress#totalProgressBar\n\nconst arcMask = new ArcMask(document.getElementById('arcMask'));\n\neventDispatcher.on('timer:session-in-progress', ({session: {name, left: secondsLeft, len: secondsTotal}}) => {\n\tlet percentLeft = Math.round(secondsLeft / secondsTotal * 100);\n\tconsole.log(\"percent left\", percentLeft);\n\tarcMask.drawArc(percentLeft);\n\tprgBar.value = 100 - percentLeft;\n});\n\neventDispatcher.on('timer:session-modified', ({modification: {valueName, newValue: seconds}, isCurrentSession}) => {\n\t// reset progress indicators when session is modified by the user\n\tif(valueName === \"len\" && isCurrentSession) {\n\t\tarcMask.drawArc(100);\n\t\tprgBar.value = 0;\n\t}\n});\n","/**\n * Timer with several sessions in order passed to constructor, capable of dispatching events during countdown and between sessions.\n *\n * @param  options  {updateFrequency : 1, loop: true, pauseOnSessionStart: false, pauseOnSessionEnd: false, eventDispatcher: new EventDispatcher}\n\t* @param updateFrequency\tfrequency to call _decrement at on current session, in seconds\n\t* @param loop\twhether to loop to first session upon reaching the end or not\n\t* @param eventDispatcher\tan instance of EventDispatcher class, will be ceated if no existing EventDispatcher is passed\n\t* @param pauseOnSessionStart\twhether to pause when changing to a new session (right after _onSessionProgress is fired, left === len)\n\t* @param pauseOnSessionEnd\twhether to pause when currentSession has elapsed (right after _onSessionProgress is fired, left === 0)\n\t* @param reversed\tgo through sessions array in reverse\n * @param  sessions array of {name: 'work', len: 25}\n\t* @param name\tname of the session\n\t* @param len\tlength of the session in seconds\n */\nclass Timer extends EventfulClass {\n\t// default values in destructuring assignments don't work in Firefox yet\n\t// constructor({updateFrequency = 1, loop = true, pauseOnSessionStart: false, pauseOnSessionEnd: false, reversed: false, eventDispatcher = new EventDispatcher()}, ...sessions)\n\tconstructor(options, ...sessions) {\n\t\tsuper(options.eventDispatcher);\n\n\t\tconst defaultOptions = {updateFrequency: 1, loop: true, pauseOnSessionStart: false, pauseOnSessionEnd: false, reversed: false};\n\t\t({updateFrequency: this._updateFrequency, loop: this._loop, pauseOnSessionStart: this._pauseOnSessionStart, pauseOnSessionEnd: this._pauseOnSessionEnd, reversed: this._reversed} = Object.assign({}, defaultOptions, options));\n\n\t\tthis._state = \"idle\";\n\n\t\t// session = {name: 'break', len: 5[seconds] [, skip: false, pauseOnStart: false, pauseOnEnd: false]}\n\t\tthis._sessions = sessions;\n\t\tconst startIndex = this._reversed ? this._sessions.length - 1 : 0;\n\t\tthis._currentSession = sessions[startIndex];\n\t\tthis._currentSessionIndex = startIndex;\n\n\t\tthis._sessionsByName = {};\n\n\t\tfor(let session of sessions) {\n\t\t\tTimer.checkTimeValidity(session.len);\n\t\t\tthis._sessionsByName[session.name] = session;\n\t\t}\n\t}\n\n\tget sessions() {\n\t\treturn this._sessions;\n\t}\n\n\tset sessions(sessions) {\n\t\t// remove references to current sessions\n\t\tthis._sessionsByName = {};\n\t\tthis._sessions = sessions;\n\t\tfor(let session of sessions) {\n\t\t\tTimer.checkTimeValidity(session.len);\n\t\t\tthis._sessionsByName[session.name] = session;\n\t\t}\n\n\t\t// reset progress and order\n\t\tthis._pause();\n\t\tthis.reset();\n\n\t\tthis._onSessionModified(sessions, {valueName: \"new-sessions\"});\n\t}\n\n\tisIdle() {\n\t\treturn this._state === \"idle\";\n\t}\n\n\tisActive() {\n\t\treturn this._state === \"active\";\n\t}\n\n\tisPaused() {\n\t\treturn this._state === \"paused\";\n\t}\n\n\taddSession(session, index = this._sessions.length) {\n\t\tTimer.checkTimeValidity(session.len);\n\t\tthis._sessions.splice(index, 0, session);\n\t\tthis._sessionsByName[session.name] = session;\n\n\t\t// hotswap sessions if adding in place of currentSession\n\t\tconst isCurrentSession = this._currentSessionIndex === index;\n\t\tif(isCurrentSession) {\n\t\t\tthis._currentSession = session;\n\n\t\t\t// if countdown is in progress or paused, reset .left on the new session unless already provided\n\t\t\tif(this.isActive() || this.isPaused()) this._resetCurrentSessionIfElapsed();\n\t\t}\n\n\t\tthis._onSessionModified(session, {valueName: \"new-session\"}, isCurrentSession);\n\t}\n\n\tget state() {\n\t\treturn this._state;\n\t}\n\n\tgetElapsedSessions() {\n\t\treturn this._sessions.filter((session) => {return session.left === 0;});\n\t}\n\n\tgetSession(name) {\n\t\treturn this._sessionsByName[name];\n\t}\n\n\tgetSessionIndex(name) {\n\t\tconst session = this.getSession(name);\n\t\t// no session return -1 index\n\t\tif(!session) return -1;\n\n\t\treturn this._sessions.indexOf(session);\n\t}\n\n\tgetSessionByIndex(index) {\n\t\treturn this._sessions[index];\n\t}\n\n\tget sessionsCount() {\n\t\treturn this._sessions.length;\n\t}\n\n\tget currentSession() {\n\t\treturn this._currentSession;\n\t}\n\n\tget currentSessionIndex() {\n\t\treturn this._currentSessionIndex;\n\t}\n\n\tstatic checkTimeValidity(seconds) {\n\t\tif(seconds < 0 || typeof seconds !== \"number\") throw new RangeError(\"time must be a positive number\");\n\t}\n\n\tsetLength(seconds, name = this._currentSession.name, resetCurrentSession = false) {\n\t\tTimer.checkTimeValidity(seconds);\n\t\tconst settingSession = this._sessionsByName[name];\n\t\tif(!settingSession) return;\n\n\t\tconst modification = {valueName: \"len\", oldValue: settingSession.len, newValue: seconds};\n\t\tsettingSession.len = seconds;\n\n\t\tconst isCurrentSession = settingSession === this._currentSession;\n\t\tif(isCurrentSession && resetCurrentSession) this.resetCurrentSession();\n\n\t\t// first inform of modification\n\t\tthis._onSessionModified(settingSession, modification, isCurrentSession);\n\t\t// then skip if necessary\n\t\tif(seconds === 0 && isCurrentSession) this._sessionTransition();\n\t}\n\n\tsetTimeLeft(seconds, name = this._currentSession.name) {\n\t\tTimer.checkTimeValidity(seconds);\n\t\tconst settingSession = this._sessionsByName[name];\n\t\tif(!settingSession) return;\n\n\t\tconst modification = {valueName: \"left\", oldValue: settingSession.left, newValue: seconds};\n\t\tsettingSession.left = seconds;\n\n\t\tconst isCurrentSession = settingSession === this._currentSession;\n\n\t\t// first inform of modification\n\t\tthis._onSessionModified(settingSession, modification, isCurrentSession);\n\t\t// then skip if necessary\n\t\tif(seconds === 0 && isCurrentSession) this._sessionTransition();\n\t}\n\n\tget updateFrequency() {\n\t\treturn this._updateFrequency;\n\t}\n\n\tset updateFrequency(freq) {\n\t\tTimer.checkTimeValidity(freq);\n\t\tconst modification = {valueName: \"updateFrequency\", oldValue: this._updateFrequency, newValue: freq};\n\t\tthis._updateFrequency = freq;\n\n\t\tthis._onOptionsModified(modification);\n\t\t// restart interval timer with new frequency if in progress\n\t\tif(this.isActive()) {\n\t\t\tthis._pause();\n\t\t\tthis._resume();\n\t\t}\n\t}\n\n\tget loop() {\n\t\treturn this._loop;\n\t}\n\n\tset loop(loop) {\n\t\tconst modification = {valueName: \"loop\", oldValue: this._loop, newValue: loop};\n\t\tthis._loop = loop;\n\n\t\tthis._onOptionsModified(modification);\n\t}\n\n\tget reversed() {\n\t\treturn this._reversed;\n\t}\n\n\tset reversed(reversed) {\n\t\tconst modification = {valueName: \"reversed\", oldValue: this._reversed, newValue: reversed};\n\t\tthis._reversed = reversed;\n\n\t\tthis._onOptionsModified(modification);\n\t}\n\n\tget pauseOnSessionStart() {\n\t\treturn this._pauseOnSessionStart;\n\t}\n\n\tset pauseOnSessionStart(pause) {\n\t\tconst modification = {valueName: \"pauseOnSessionStart\", oldValue: this._pauseOnSessionStart, newValue: pause};\n\t\tthis._pauseOnSessionStart = pause;\n\n\t\tthis._onOptionsModified(modification);\n\t}\n\n\tget pauseOnSessionEnd() {\n\t\treturn this._pauseOnSessionEnd;\n\t}\n\n\tset pauseOnSessionEnd(pause) {\n\t\tconst modification = {valueName: \"pauseOnSessionEnd\", oldValue: this._pauseOnSessionEnd, newValue: pause};\n\t\tthis._pauseOnSessionEnd = pause;\n\n\t\tthis._onOptionsModified(modification);\n\t}\n\n\tsetSessionToSkip(skip = true, name = this._currentSession.name) {\n\t\tconst settingSession = this._sessionsByName[name];\n\t\tif(!settingSession) return;\n\n\t\tconst modification = {valueName: \"skip\", oldValue: settingSession.skip, newValue: skip};\n\t\tsettingSession.skip = skip;\n\n\t\tconst isCurrentSession = settingSession === this._currentSession;\n\n\t\t// first inform of modification\n\t\tthis._onSessionModified(settingSession, modification, isCurrentSession);\n\t\t// then skip if necessary\n\t\tif(skip && isCurrentSession) this._sessionTransition();\n\t}\n\n\tsetSessionToPauseOnStart(pause = true, name = this._currentSession.name) {\n\t\tconst settingSession = this._sessionsByName[name];\n\t\tif(!settingSession) return;\n\n\t\tconst modification = {valueName: \"pauseOnStart\", oldValue: settingSession.pauseOnStart, newValue: pause};\n\t\tsettingSession.pauseOnStart = pause;\n\n\t\tconst isCurrentSession = settingSession === this._currentSession;\n\n\t\t// first inform of modification\n\t\tthis._onSessionModified(settingSession, modification, isCurrentSession);\n\t}\n\n\tsetSessionToPauseOnEnd(pause = true, name = this._currentSession.name) {\n\t\tconst settingSession = this._sessionsByName[name];\n\t\tif(!settingSession) return;\n\n\t\tconst modification = {valueName: \"pauseOnEnd\", oldValue: settingSession.pauseOnEnd, newValue: pause};\n\t\tsettingSession.pauseOnEnd = pause;\n\n\t\tconst isCurrentSession = settingSession === this._currentSession;\n\n\t\t// first inform of modification\n\t\tthis._onSessionModified(settingSession, modification, isCurrentSession);\n\t}\n\n\tstart(reason = \"called-from-without\") {\n\t\t// pause in case active\n\t\tthis._pause();\n\t\tthis.reset();\n\t\tthis.resume(reason);\n\t}\n\n\tstartFromSession(name, reason = \"called-from-without\") {\n\t\t// pause in case active\n\t\tthis._pause();\n\n\t\tconst session = this.getSession(name);\n\t\tif(!session) return;\n\n\t\tthis._currentSession = session;\n\t\tthis._currentSessionIndex = this._sessions.indexOf(session);\n\t\tthis.resetCurrentSession();\n\t\tthis.resume(reason);\n\t}\n\n\tstop(reason = \"called-from-without\") {\n\t\tconst prevState = this._state;\n\t\tthis._pause();\n\t\tthis.resetOrder();\n\t\tthis._state = \"idle\";\n\n\t\tthis._onStateChanged(prevState, reason);\n\t}\n\n\tpause(reason = \"called-from-without\") {\n\t\tconst prevState = this._state;\n\t\tthis._pause();\n\t\tthis._state = \"paused\";\n\n\t\tthis._onStateChanged(prevState, reason);\n\t}\n\n\t_pause() {\n\t\tclearInterval(this.intervalId);\n\t}\n\n\tresume(reason = \"called-from-without\") {\n\t\t// if session is null (when all sessions elapsed and loop === false)\n\t\tif(!this._currentSession) return;\n\n\t\tconst prevState = this._state;\n\t\tthis._resume();\n\t\tthis._state = \"active\";\n\n\t\tthis._onStateChanged(prevState, reason);\n\t}\n\n\t_resume() {\n\t\t// first report current/starting progress\n\t\tthis._onSessionProgress();\n\t\tthis.intervalId = setInterval(this._decrement.bind(this), this._updateFrequency * 1000); //updateFrequency is in seconds\n\t}\n\n\treset() {\n\t\tthis.resetOrder();\n\t\tthis.resetCurrentSession();\n\t}\n\n\tresetOrder() {\n\t\tconst startIndex = this._reversed ? this._sessions.length - 1 : 0;\n\t\tthis._currentSession = this._sessions[startIndex];\n\t\tthis._currentSessionIndex = startIndex;\n\t}\n\n\tresetCurrentSession() {\n\t\t// don't manipulate a null session\n\t\tif(!this._currentSession) return;\n\t\tthis._currentSession.left = this._currentSession.len;\n\t}\n\n\t_resetCurrentSessionIfElapsed() {\n\t\t// don't reset if session.left was set to something else (by the user)\n\t\tconst left = this._currentSession.left;\n\t\tif(left === undefined || left <= 0) this.resetCurrentSession();\n\t}\n\n\t_decrement() {\n\t\t// if starting with no seconds left, which can happen if session was paused-on-end\n\t\tif(this._currentSession.left <= 0) this._sessionTransition();\n\n\t\tthis._currentSession.left -= this._updateFrequency;\n\t\tconsole.log(\"left\", this._currentSession.left, \", freq\", this._updateFrequency);\n\n\t\t// don't actually let it go below 0\n\t\tif(this._currentSession.left < 0) this._currentSession.left = 0;\n\n\t\tthis._onSessionProgress();\n\n\t\t// if timer elapsed\n\t\tif(this._currentSession.left === 0) {\n\t\t\t// pause if required to at the end of session in progress\n\t\t\tif(this._pauseOnEndIfRequired()) return;\n\t\t\tthis._sessionTransition();\n\t\t}\n\t}\n\n\t_sessionTransition() {\n\t\tthis._goToNextSession(\"previous-session-ended\");\n\n\t\t// if no next session for whatever reason\n\t\tif(this._currentSession == null) this.stop(\"no-next-session\");\n\t\t// otherwise reset countdown\n\t\telse {\n\t\t\tthis._resetCurrentSessionIfElapsed();\n\t\t\t// first report current/starting progress\n\t\t\tthis._onSessionProgress();\n\t\t\t// pause if required at the start of new session\n\t\t\tthis._pauseOnStartIfRequired();\n\t\t}\n\t}\n\n\t_goToNextSession(reason) {\n\t\tconst prevSession = {session: this._currentSession, index: this._currentSessionIndex};\n\t\t({index: this._currentSessionIndex, session: this._currentSession} = this._getNextSession());\n\t\tif(this._currentSession) this._resetCurrentSessionIfElapsed();\n\t\tthis._onSessionChanged(prevSession, reason);\n\t}\n\n\t_getNextSession() {\n\t\tlet nextSessionIndex = this._currentSessionIndex;\n\n\t\tlet nextSession;\n\n\t\t// look for the next non-skipped session in order of this.session\n\t\tdo {\n\t\t\tthis._reversed ? --nextSessionIndex : ++nextSessionIndex;\n\t\t\t// reached last session, loop to start\n\t\t\tif(nextSessionIndex === this._sessions.length || nextSessionIndex === -1) {\n\t\t\t\tnextSessionIndex = this._reversed ? this._sessions.length - 1 : 0;\n\n\t\t\t\t// unless loop option is false\n\t\t\t\tif(!this._loop) {\n\t\t\t\t\tnextSession = null;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// looped already to where started, no available sessions found\n\t\t\tif(nextSessionIndex === this._currentSessionIndex) {\n\t\t\t\tnextSessionIndex = this._reversed ? this._sessions.length - 1 : 0;\n\t\t\t\tnextSession = null;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tnextSession = this._sessions[nextSessionIndex];\n\t\t} while(nextSession.skip);\n\n\t\treturn {index: nextSessionIndex, session: nextSession};\n\t}\n\n\tskipToNextSession(thenPause = false, resetCurrent = true) {\n\t\tthis._skipSession(thenPause, resetCurrent, \"skipped-to-next-session\");\n\t}\n\n\t_skipSession(thenPause, resetCurrent, reason) {\n\t\t// reset, then skip\n\t\tif(resetCurrent) this.resetCurrentSession();\n\t\tthis._goToNextSession(reason);\n\t\tthis.resetCurrentSession();\n\n\t\t// if no next session for whatever reason\n\t\tif(this._currentSession == null) return this.stop(\"no-next-session\");\n\n\t\tthis._onSessionProgress();\n\n\t\tif(thenPause) this.pause(\"paused-on-start\");\n\t}\n\n\tskipToPreviousSession(thenPause = false, resetCurrent = true) {\n\t\t// reverse direction\n\t\tthis._reversed = !this._reversed;\n\n\t\tthis._skipSession(thenPause, resetCurrent, \"skipped-to-previous-session\");\n\n\t\t// restore direction\n\t\tthis._reversed = !this._reversed;\n\t}\n\n\t_pauseOnStartIfRequired() {\n\t\tconst paused = this._pauseOnSessionStart || this._currentSession.pauseOnStart;\n\t\tif(paused) this.pause(\"paused-on-start\");\n\n\t\treturn paused;\n\t}\n\n\t_pauseOnEndIfRequired() {\n\t\tconst paused = this.pauseOnSessionEnd || this._currentSession.pauseOnEnd;\n\t\tif(paused) this.pause(\"paused-on-end\");\n\n\t\treturn paused;\n\t}\n\n\t_onStateChanged(previousState, reason) {\n\t\tconsole.log(\"timer:state-changed\", this._currentSession.name, previousState, \"=>\", this._state);\n\t\tthis.emit(\"timer:state-changed\", {previousState, currentState: this._state, session: this._currentSession, index: this._currentSessionIndex, reason});\n\t}\n\n\t_onSessionChanged(ended, reason) {\n\t\tconsole.log('timer:session-changed', ended.session, ended.index, \"=>\", this._currentSession, this._currentSessionIndex);\n\t\tthis.emit('timer:session-changed', {ended, started: {session: this._currentSession, index: this._currentSessionIndex}, reason});\n\t}\n\n\t_onSessionProgress() {\n\t\tconsole.log(\"timer:session-in-progress\", this._currentSession.name, this._currentSession.left);\n\t\tthis.emit(\"timer:session-in-progress\", {session: this._currentSession, index: this._currentSessionIndex});\n\t}\n\n\t// fired on setting len, left, skip values or adding a new session via instance methods (not directly through inst.sessions[0].len = ...)\n\t_onSessionModified(session, modification, isCurrentSession) {\n\t\t//  modification is of form {valueName: \"new-session\"} or {valueName: \"[value name], oldValue: [number], newValue: [number]\"}\n\t\tconsole.log(\"session\", session.name, \"modified\", modification, \", isCurrentSession\", isCurrentSession);\n\t\tthis.emit(\"timer:session-modified\", {session, modification, isCurrentSession, timerState: this.state});\n\t}\n\n\t// fired on setting updateFrequency and loop values\n\t_onOptionsModified(modification) {\n\t\t//  modification is of form {valueName: \"[value name], oldValue: [number], newValue: [number]\"}\n\t\tconsole.log(\"timer:options-modified\", modification, this.state);\n\t\tthis.emit(\"timer:options-modified\", {modification, timerState: this.state});\n\t}\n\n}\n\nconst pomodoroTimer = new Timer({eventDispatcher}, {name: \"work\", len: getWorkTimeSetting()*60}, {name: \"break\", len: getBreakTimeSetting()*60});\n\n\neventDispatcher.on('work-timer:time-set', (seconds) => {\n\tpomodoroTimer.setLength(seconds, \"work\", true);\n});\neventDispatcher.on('break-timer:time-set', (seconds) => {\n\tpomodoroTimer.setLength(seconds, \"break\", true);\n});\n\neventDispatcher.on('tomato-big-button-clicked', () => {\n\tswitch (pomodoroTimer.state) {\n\tcase \"idle\":\n\t\tpomodoroTimer.start();\n\t\tbreak;\n\tcase \"active\":\n\t\tpomodoroTimer.pause();\n\t\tbreak;\n\tcase \"paused\":\n\t\tpomodoroTimer.resume();\n\t\tbreak;\n\tdefault:\n\t\treturn;\n\t}\n});\n\neventDispatcher.on('check-pause-on-break-start:changed', (on) => {\n\tpomodoroTimer.setSessionToPauseOnStart(on, \"break\");\n});\neventDispatcher.on('check-pause-on-work-start:changed', (on) => {\n\tpomodoroTimer.setSessionToPauseOnStart(on, \"work\");\n});\n\neventDispatcher.on('skip-session-button-clicked', (on) => {\n\tpomodoroTimer.skipToNextSession(true);\n});\n","// .tomatTimer > .svgSpace .all-tomato\n\nconst tomatoSvg = document.querySelector('.all-tomato');\n\neventDispatcher.on('check-clock-filled:changed', (on, skipTransition) => {\n\tif(skipTransition) {\n\t\t// force reflow if necessary\n\t\tif(on !== tomatoSvg.classList.contains('transparent')) return;\n\t\ttomatoSvg.classList.add(\"no-transition\");\n\t\ttomatoSvg.classList.toggle('transparent', !on);\n\t\t// reflow\n\t\ttomatoSvg.clientWidth;\n\t\ttomatoSvg.classList.remove(\"no-transition\");\n\t} else tomatoSvg.classList.toggle('transparent', !on);\n});\n","// .tomatoTimer\n\nconst tomatoTimerBigButton = document.querySelector('.tomatoTimer');\n\ntomatoTimerBigButton.addEventListener('click', () => {\n\teventDispatcher.emit(\"tomato-big-button-clicked\");\n});\n"],"sourceRoot":"/source/"}